{
  "version": 1,
  "minor_version": 1,
  "key": "trace.saved_traces",
  "data": {
    "automation.1727066405247": [
      {
        "extended_dict": {
          "last_step": "action/0/default/3/parallel/1/sequence/11",
          "run_id": "5293c48da24dbe52ef487b263918e98c",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2024-09-23T04:41:11.765690+00:00",
            "finish": "2024-09-23T04:41:12.608937+00:00"
          },
          "domain": "automation",
          "item_id": "1727066405247",
          "trigger": "Home Assistant starting",
          "trace": {
            "trigger/19": [
              {
                "path": "trigger/19",
                "timestamp": "2024-09-23T04:41:11.770940+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.sensor_light",
                    "state": "on",
                    "attributes": {
                      "id": "1727066405247",
                      "last_triggered": null,
                      "mode": "restart",
                      "current": 0,
                      "friendly_name": "Sensor Light"
                    },
                    "last_changed": "2024-09-23T04:41:09.415438+00:00",
                    "last_reported": "2024-09-23T04:41:09.415438+00:00",
                    "last_updated": "2024-09-23T04:41:09.415438+00:00",
                    "context": {
                      "id": "01J8EJXX17XSZMQ34SG8RZV93V",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "t15",
                    "idx": "19",
                    "alias": null,
                    "platform": "homeassistant",
                    "event": "start",
                    "description": "Home Assistant starting"
                  },
                  "motion_trigger": [
                    "binary_sensor.bedroom_contact"
                  ],
                  "light_switch": {
                    "device_id": "d9614a84d59f0e41e02a56952c58a916",
                    "entity_id": "switch.sonoff_100156cbbb_2"
                  },
                  "boolean_scenes_scripts": [],
                  "end_scenes": [],
                  "time_delay": 0,
                  "include_light_control": [],
                  "light_brightness": 100,
                  "light_transition_on": 1,
                  "light_transition_off": 1,
                  "include_light_colour_control": "disable_colour_control",
                  "light_colour_temperature": 5000,
                  "light_rgb_colour": [
                    255,
                    255,
                    255
                  ],
                  "light_rgbw_colour": [
                    255,
                    255,
                    255,
                    255
                  ],
                  "light_rgbww_colour": [
                    255,
                    255,
                    255,
                    255,
                    255
                  ],
                  "include_dynamic_lighting": "disable_dynamic_lighting",
                  "dynamic_lighting_lux_sensor": [],
                  "dynamic_lighting_max_lux": 400,
                  "dynamic_lighting_min_lux": 40,
                  "dynamic_lighting_max_brightness": 100,
                  "dynamic_lighting_min_brightness": 0,
                  "dynamic_lighting_boolean": [],
                  "dynamic_lighting_max_colour_temp": 5000,
                  "dynamic_lighting_min_colour_temp": 3000,
                  "dynamic_lighting_sun_elevation_start_rising": -1.5,
                  "dynamic_lighting_sun_elevation_end_rising": 15,
                  "dynamic_lighting_sun_elevation_start_falling": 15,
                  "dynamic_lighting_sun_elevation_end_falling": -4.0,
                  "dynamic_lighting_heartbeat": 1,
                  "dynamic_lighting_step_value": 4,
                  "dynamic_lighting_dead_zone": 7,
                  "include_bypass": [],
                  "motion_bypass_lights_on": [],
                  "motion_bypass_lights_off": [],
                  "motion_bypass_lights_stop": [],
                  "bypass_time_delay": 0,
                  "include_bypass_auto_off": [],
                  "bypass_auto_off_delay": 60,
                  "include_sun": "sun_disabled",
                  "sun_elevation": -1.5,
                  "sun_elevation_rising": -4.0,
                  "include_ambient": "ambient_disabled",
                  "ambient_light_sensor": [],
                  "ambient_light_options": "ambient_light_option_disabled",
                  "ambient_light_value": 20,
                  "ambient_light_high_value": 80,
                  "include_time": "time_disabled",
                  "after_time": "00:00:00",
                  "before_time": "00:00:00",
                  "weekday_options": [
                    "mon",
                    "tue",
                    "wed",
                    "thu",
                    "fri",
                    "sat",
                    "sun"
                  ],
                  "include_device_tracker": "device_tracker_disabled",
                  "zone": [],
                  "people": [],
                  "include_night_lights": "night_lights_disabled",
                  "night_lights_conditions": [],
                  "night_lights_entity_state": [],
                  "night_lights_after_time": "00:00:00",
                  "night_lights_before_time": "00:00:00",
                  "night_lights_sun_elevation": -1.5,
                  "night_lights_sun_elevation_rising": -4.0,
                  "night_lights": {},
                  "night_boolean_scenes_scripts": [],
                  "night_time_delay": 5,
                  "include_night_light_control": [],
                  "night_light_brightness": 20,
                  "night_light_transition_on": 1,
                  "night_light_transition_off": 1,
                  "include_night_light_colour_control": "disable_colour_control",
                  "night_light_colour_temperature": 5000,
                  "night_light_rgb_colour": [
                    255,
                    255,
                    255
                  ],
                  "night_light_rgbw_colour": [
                    255,
                    255,
                    255,
                    255
                  ],
                  "night_light_rgbww_colour": [
                    255,
                    255,
                    255,
                    255,
                    255
                  ],
                  "light_entities_off": [],
                  "switch_entities_off": [],
                  "light_data": {},
                  "light_entities": [],
                  "switch_entities": [
                    "switch.sonoff_100156cbbb_2"
                  ],
                  "scene_entities": [],
                  "script_entities": [],
                  "boolean_scenes_scripts_helper": [],
                  "end_scene_entities": [],
                  "end_script_entities": [],
                  "night_light_entities_off": [],
                  "night_switch_entities_off": [],
                  "night_light_data": {},
                  "night_light_entities": [],
                  "night_switch_entities": [],
                  "night_scene_entities": [],
                  "night_script_entities": [],
                  "night_boolean_scenes_scripts_helper": [],
                  "crossover_lights_light": [],
                  "crossover_lights_switch": [],
                  "crossover_night_lights_light_on": [],
                  "crossover_night_lights_light": [],
                  "crossover_night_lights_switch": [],
                  "crossover_lights_light_on": []
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2024-09-23T04:41:11.771008+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/0": [
              {
                "path": "condition/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771046+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/0/conditions/0": [
              {
                "path": "condition/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771076+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/0/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/0/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:41:11.771103+00:00",
                "result": {
                  "result": false,
                  "state": "unknown",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/0/conditions/1": [
              {
                "path": "condition/0/conditions/1",
                "timestamp": "2024-09-23T04:41:11.771172+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1/conditions/0": [
              {
                "path": "condition/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771198+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/1/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:41:11.771329+00:00",
                "result": {
                  "result": false,
                  "state": "unknown",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/0/conditions/2": [
              {
                "path": "condition/0/conditions/2",
                "timestamp": "2024-09-23T04:41:11.771382+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/2/conditions/0": [
              {
                "path": "condition/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771415+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/2/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/2/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:41:11.771441+00:00",
                "result": {
                  "result": false,
                  "state": "unknown",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/0/conditions/3": [
              {
                "path": "condition/0/conditions/3",
                "timestamp": "2024-09-23T04:41:11.771487+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/3/conditions/0": [
              {
                "path": "condition/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771517+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/3/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/3/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:41:11.771543+00:00",
                "result": {
                  "result": false,
                  "state": "unknown",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/0/conditions/4": [
              {
                "path": "condition/0/conditions/4",
                "timestamp": "2024-09-23T04:41:11.771586+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/4/conditions/0": [
              {
                "path": "condition/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771612+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/5": [
              {
                "path": "condition/0/conditions/5",
                "timestamp": "2024-09-23T04:41:11.771651+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/5/conditions/0": [
              {
                "path": "condition/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771677+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/6": [
              {
                "path": "condition/0/conditions/6",
                "timestamp": "2024-09-23T04:41:11.771714+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/6/conditions/0": [
              {
                "path": "condition/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771740+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/7": [
              {
                "path": "condition/0/conditions/7",
                "timestamp": "2024-09-23T04:41:11.771780+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/7/conditions/0": [
              {
                "path": "condition/0/conditions/7/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771807+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/8": [
              {
                "path": "condition/0/conditions/8",
                "timestamp": "2024-09-23T04:41:11.771843+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/8/conditions/0": [
              {
                "path": "condition/0/conditions/8/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771870+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/9": [
              {
                "path": "condition/0/conditions/9",
                "timestamp": "2024-09-23T04:41:11.771908+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/9/conditions/0": [
              {
                "path": "condition/0/conditions/9/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771934+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/10": [
              {
                "path": "condition/0/conditions/10",
                "timestamp": "2024-09-23T04:41:11.771970+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/10/conditions/0": [
              {
                "path": "condition/0/conditions/10/conditions/0",
                "timestamp": "2024-09-23T04:41:11.771996+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/11": [
              {
                "path": "condition/0/conditions/11",
                "timestamp": "2024-09-23T04:41:11.772032+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/11/conditions/0": [
              {
                "path": "condition/0/conditions/11/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772058+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/12": [
              {
                "path": "condition/0/conditions/12",
                "timestamp": "2024-09-23T04:41:11.772094+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/12/conditions/0": [
              {
                "path": "condition/0/conditions/12/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772121+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/13": [
              {
                "path": "condition/0/conditions/13",
                "timestamp": "2024-09-23T04:41:11.772158+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/13/conditions/0": [
              {
                "path": "condition/0/conditions/13/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772186+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/14": [
              {
                "path": "condition/0/conditions/14",
                "timestamp": "2024-09-23T04:41:11.772229+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/14/conditions/0": [
              {
                "path": "condition/0/conditions/14/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772256+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/15": [
              {
                "path": "condition/0/conditions/15",
                "timestamp": "2024-09-23T04:41:11.772291+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/15/conditions/0": [
              {
                "path": "condition/0/conditions/15/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772319+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/16": [
              {
                "path": "condition/0/conditions/16",
                "timestamp": "2024-09-23T04:41:11.772353+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/16/conditions/0": [
              {
                "path": "condition/0/conditions/16/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772383+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/17": [
              {
                "path": "condition/0/conditions/17",
                "timestamp": "2024-09-23T04:41:11.772417+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/17/conditions/0": [
              {
                "path": "condition/0/conditions/17/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772443+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/18": [
              {
                "path": "condition/0/conditions/18",
                "timestamp": "2024-09-23T04:41:11.772477+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/18/conditions/0": [
              {
                "path": "condition/0/conditions/18/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772503+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/19": [
              {
                "path": "condition/0/conditions/19",
                "timestamp": "2024-09-23T04:41:11.772537+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/0": [
              {
                "path": "condition/0/conditions/19/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772562+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/1": [
              {
                "path": "condition/0/conditions/19/conditions/1",
                "timestamp": "2024-09-23T04:41:11.772591+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/1/conditions/0": [
              {
                "path": "condition/0/conditions/19/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772617+00:00",
                "result": {
                  "result": true,
                  "entities": [
                    "switch.sonoff_100156cbbb_2"
                  ]
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2024-09-23T04:41:11.772850+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/conditions/0": [
              {
                "path": "condition/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.772879+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2024-09-23T04:41:11.773006+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/2/conditions/0": [
              {
                "path": "condition/2/conditions/0",
                "timestamp": "2024-09-23T04:41:11.773032+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/3": [
              {
                "path": "condition/3",
                "timestamp": "2024-09-23T04:41:11.773175+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/3/conditions/0": [
              {
                "path": "condition/3/conditions/0",
                "timestamp": "2024-09-23T04:41:11.773203+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/4": [
              {
                "path": "condition/4",
                "timestamp": "2024-09-23T04:41:11.773315+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/4/conditions/0": [
              {
                "path": "condition/4/conditions/0",
                "timestamp": "2024-09-23T04:41:11.773341+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/5": [
              {
                "path": "condition/5",
                "timestamp": "2024-09-23T04:41:11.773452+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/5/conditions/0": [
              {
                "path": "condition/5/conditions/0",
                "timestamp": "2024-09-23T04:41:11.773478+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2024-09-23T04:41:11.773921+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01J8EJXZANQQP7NQSY21D2G7A8",
                    "parent_id": null,
                    "user_id": null
                  }
                },
                "result": {
                  "choice": "default"
                }
              }
            ],
            "action/0/choose/0": [
              {
                "path": "action/0/choose/0",
                "timestamp": "2024-09-23T04:41:11.774313+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/choose/0/conditions/0": [
              {
                "path": "action/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.774350+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/choose/0/conditions/0/conditions/0": [
              {
                "path": "action/0/choose/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.774377+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/choose/0/conditions/0/conditions/0/conditions/0": [
              {
                "path": "action/0/choose/0/conditions/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.774403+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/0": [
              {
                "path": "action/0/default/0",
                "timestamp": "2024-09-23T04:41:11.774667+00:00"
              }
            ],
            "action/0/default/0/choose/0": [
              {
                "path": "action/0/default/0/choose/0",
                "timestamp": "2024-09-23T04:41:11.774784+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/0/choose/0/conditions/0": [
              {
                "path": "action/0/default/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.774816+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/0/choose/1": [
              {
                "path": "action/0/default/0/choose/1",
                "timestamp": "2024-09-23T04:41:11.774861+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/0/choose/1/conditions/0": [
              {
                "path": "action/0/default/0/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.774888+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1": [
              {
                "path": "action/0/default/1",
                "timestamp": "2024-09-23T04:41:11.774958+00:00"
              }
            ],
            "action/0/default/1/choose/0": [
              {
                "path": "action/0/default/1/choose/0",
                "timestamp": "2024-09-23T04:41:11.775290+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1/choose/0/conditions/0": [
              {
                "path": "action/0/default/1/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.775322+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1/choose/1": [
              {
                "path": "action/0/default/1/choose/1",
                "timestamp": "2024-09-23T04:41:11.775367+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1/choose/1/conditions/0": [
              {
                "path": "action/0/default/1/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.775391+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2": [
              {
                "path": "action/0/default/2",
                "timestamp": "2024-09-23T04:41:11.775617+00:00",
                "result": {
                  "choice": 2
                }
              }
            ],
            "action/0/default/2/choose/0": [
              {
                "path": "action/0/default/2/choose/0",
                "timestamp": "2024-09-23T04:41:11.775731+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.775758+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/1": [
              {
                "path": "action/0/default/2/choose/1",
                "timestamp": "2024-09-23T04:41:11.775796+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.775820+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2": [
              {
                "path": "action/0/default/2/choose/2",
                "timestamp": "2024-09-23T04:41:11.775855+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/2/choose/2/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/conditions/0",
                "timestamp": "2024-09-23T04:41:11.775878+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0",
                "timestamp": "2024-09-23T04:41:11.775996+00:00"
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0",
                "timestamp": "2024-09-23T04:41:11.776772+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.776802+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.776827+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.776859+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1",
                "timestamp": "2024-09-23T04:41:11.777001+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777026+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2",
                "timestamp": "2024-09-23T04:41:11.777146+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777169+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3",
                "timestamp": "2024-09-23T04:41:11.777272+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777295+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4",
                "timestamp": "2024-09-23T04:41:11.777400+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777423+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5",
                "timestamp": "2024-09-23T04:41:11.777526+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777548+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6",
                "timestamp": "2024-09-23T04:41:11.777644+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777666+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1",
                "timestamp": "2024-09-23T04:41:11.777779+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777803+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777825+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777849+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1",
                "timestamp": "2024-09-23T04:41:11.777948+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.777971+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2",
                "timestamp": "2024-09-23T04:41:11.778065+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T04:41:11.778087+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3",
                "timestamp": "2024-09-23T04:41:11.778191+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T04:41:11.778213+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4",
                "timestamp": "2024-09-23T04:41:11.778314+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T04:41:11.778337+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5",
                "timestamp": "2024-09-23T04:41:11.778438+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T04:41:11.778460+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6",
                "timestamp": "2024-09-23T04:41:11.778559+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T04:41:11.778581+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3": [
              {
                "path": "action/0/default/3",
                "timestamp": "2024-09-23T04:41:11.778799+00:00"
              }
            ],
            "action/0/default/3/parallel/0/sequence/0": [
              {
                "path": "action/0/default/3/parallel/0/sequence/0",
                "timestamp": "2024-09-23T04:41:11.781048+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/0/sequence/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/0/sequence/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.781200+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0",
                "timestamp": "2024-09-23T04:41:11.781615+00:00",
                "result": {
                  "choice": 0
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0/choose/0",
                "timestamp": "2024-09-23T04:41:11.782015+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.782046+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0/choose/0/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0/choose/0/sequence/0",
                "timestamp": "2024-09-23T04:41:11.782293+00:00",
                "result": {
                  "params": {
                    "domain": "light",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1",
                "timestamp": "2024-09-23T04:41:11.782859+00:00",
                "result": {
                  "choice": 2
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/0",
                "timestamp": "2024-09-23T04:41:11.782986+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.783015+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/1",
                "timestamp": "2024-09-23T04:41:11.783142+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/1/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.783167+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2",
                "timestamp": "2024-09-23T04:41:11.783283+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2/conditions/0",
                "timestamp": "2024-09-23T04:41:11.783309+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/0",
                "timestamp": "2024-09-23T04:41:11.783480+00:00",
                "result": {
                  "params": {
                    "domain": "scene",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/1",
                "timestamp": "2024-09-23T04:41:11.783780+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_on",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/2": [
              {
                "path": "action/0/default/3/parallel/1/sequence/2",
                "timestamp": "2024-09-23T04:41:11.784055+00:00",
                "result": {
                  "params": {
                    "domain": "switch",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/3": [
              {
                "path": "action/0/default/3/parallel/1/sequence/3",
                "timestamp": "2024-09-23T04:41:11.784319+00:00",
                "result": {
                  "params": {
                    "domain": "script",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/4": [
              {
                "path": "action/0/default/3/parallel/1/sequence/4",
                "timestamp": "2024-09-23T04:41:11.784775+00:00"
              }
            ],
            "action/0/default/3/parallel/1/sequence/4/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/4/choose/0",
                "timestamp": "2024-09-23T04:41:11.784851+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/4/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/4/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.784877+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/5": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5",
                "timestamp": "2024-09-23T04:41:11.784935+00:00"
              }
            ],
            "action/0/default/3/parallel/1/sequence/5/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5/choose/0",
                "timestamp": "2024-09-23T04:41:11.785002+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.785026+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0/entity_id/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:41:11.785048+00:00",
                "result": {
                  "result": false,
                  "state": "unknown",
                  "wanted_state": "on"
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/6": [
              {
                "path": "action/0/default/3/parallel/1/sequence/6",
                "timestamp": "2024-09-23T04:41:11.785139+00:00",
                "result": {
                  "delay": 0.0,
                  "done": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/7": [
              {
                "path": "action/0/default/3/parallel/1/sequence/7",
                "timestamp": "2024-09-23T04:41:11.786174+00:00"
              }
            ],
            "action/0/default/3/parallel/1/sequence/7/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/7/choose/0",
                "timestamp": "2024-09-23T04:41:11.786259+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/7/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/7/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.786287+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8",
                "timestamp": "2024-09-23T04:41:11.786487+00:00",
                "result": {
                  "choice": 1
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/0",
                "timestamp": "2024-09-23T04:41:11.786558+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:41:11.786584+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1",
                "timestamp": "2024-09-23T04:41:11.786704+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:41:11.786729+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/0",
                "timestamp": "2024-09-23T04:41:11.786921+00:00",
                "result": {
                  "params": {
                    "domain": "light",
                    "service": "turn_off",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/1",
                "timestamp": "2024-09-23T04:41:11.787420+00:00",
                "result": {
                  "params": {
                    "domain": "scene",
                    "service": "turn_on",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/9": [
              {
                "path": "action/0/default/3/parallel/1/sequence/9",
                "timestamp": "2024-09-23T04:41:11.787709+00:00",
                "result": {
                  "params": {
                    "domain": "switch",
                    "service": "turn_off",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "switch.sonoff_100156cbbb_2"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/10": [
              {
                "path": "action/0/default/3/parallel/1/sequence/10",
                "timestamp": "2024-09-23T04:41:12.597552+00:00",
                "result": {
                  "params": {
                    "domain": "script",
                    "service": "turn_on",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/11": [
              {
                "path": "action/0/default/3/parallel/1/sequence/11",
                "timestamp": "2024-09-23T04:41:12.602408+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_off",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "mode": "restart",
            "max_exceeded": "silent",
            "variables": {
              "motion_trigger": [
                "binary_sensor.bedroom_contact"
              ],
              "light_switch": {
                "device_id": "d9614a84d59f0e41e02a56952c58a916",
                "entity_id": "switch.sonoff_100156cbbb_2"
              },
              "boolean_scenes_scripts": [],
              "end_scenes": [],
              "time_delay": 0,
              "include_light_control": [],
              "light_brightness": 100,
              "light_transition_on": 1,
              "light_transition_off": 1,
              "include_light_colour_control": "disable_colour_control",
              "light_colour_temperature": 5000,
              "light_rgb_colour": [
                255,
                255,
                255
              ],
              "light_rgbw_colour": [
                255,
                255,
                255,
                255
              ],
              "light_rgbww_colour": [
                255,
                255,
                255,
                255,
                255
              ],
              "include_dynamic_lighting": "disable_dynamic_lighting",
              "dynamic_lighting_lux_sensor": [],
              "dynamic_lighting_max_lux": 400,
              "dynamic_lighting_min_lux": 40,
              "dynamic_lighting_max_brightness": 100,
              "dynamic_lighting_min_brightness": 0,
              "dynamic_lighting_boolean": [],
              "dynamic_lighting_max_colour_temp": 5000,
              "dynamic_lighting_min_colour_temp": 3000,
              "dynamic_lighting_sun_elevation_start_rising": -1.5,
              "dynamic_lighting_sun_elevation_end_rising": 15,
              "dynamic_lighting_sun_elevation_start_falling": 15,
              "dynamic_lighting_sun_elevation_end_falling": -4.0,
              "dynamic_lighting_heartbeat": 1,
              "dynamic_lighting_step_value": 4,
              "dynamic_lighting_dead_zone": 7,
              "include_bypass": [],
              "motion_bypass_lights_on": [],
              "motion_bypass_lights_off": [],
              "motion_bypass_lights_stop": [],
              "bypass_time_delay": 0,
              "include_bypass_auto_off": [],
              "bypass_auto_off_delay": 60,
              "include_sun": "sun_disabled",
              "sun_elevation": -1.5,
              "sun_elevation_rising": -4.0,
              "include_ambient": "ambient_disabled",
              "ambient_light_sensor": [],
              "ambient_light_options": "ambient_light_option_disabled",
              "ambient_light_value": 20,
              "ambient_light_high_value": 80,
              "include_time": "time_disabled",
              "after_time": "00:00:00",
              "before_time": "00:00:00",
              "weekday_options": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ],
              "include_device_tracker": "device_tracker_disabled",
              "zone": [],
              "people": [],
              "include_night_lights": "night_lights_disabled",
              "night_lights_conditions": [],
              "night_lights_entity_state": [],
              "night_lights_after_time": "00:00:00",
              "night_lights_before_time": "00:00:00",
              "night_lights_sun_elevation": -1.5,
              "night_lights_sun_elevation_rising": -4.0,
              "night_lights": {},
              "night_boolean_scenes_scripts": [],
              "night_time_delay": 5,
              "include_night_light_control": [],
              "night_light_brightness": 20,
              "night_light_transition_on": 1,
              "night_light_transition_off": 1,
              "include_night_light_colour_control": "disable_colour_control",
              "night_light_colour_temperature": 5000,
              "night_light_rgb_colour": [
                255,
                255,
                255
              ],
              "night_light_rgbw_colour": [
                255,
                255,
                255,
                255
              ],
              "night_light_rgbww_colour": [
                255,
                255,
                255,
                255,
                255
              ],
              "light_entities_off": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}",
              "switch_entities_off": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}",
              "light_data": "{% set light = namespace(data={}) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': light_brightness }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}",
              "light_entities": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}",
              "switch_entities": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}",
              "scene_entities": "{% set a = light_switch.entity_id %} {% if boolean_scenes_scripts == [] %}\n  {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% elif is_state(boolean_scenes_scripts, 'off') %}\n  {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "script_entities": "{% set a = light_switch.entity_id %} {% if boolean_scenes_scripts == [] %}\n  {{ expand(a) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% elif is_state(boolean_scenes_scripts, 'off') %}\n  {{ expand(a) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "boolean_scenes_scripts_helper": "{% if boolean_scenes_scripts | length > 0 and states(boolean_scenes_scripts) == 'off' %}\n  {{ boolean_scenes_scripts }}\n{% else %}\n  []\n{% endif %}",
              "end_scene_entities": "{{ end_scenes | select('match', '^scene\\..*') | list }}",
              "end_script_entities": "{{ end_scenes | select('match', '^script\\..*') | list }}",
              "night_light_entities_off": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_switch_entities_off": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_light_data": "{% set light = namespace(data={}) %} {% if 'use_transition' in include_night_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': night_light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_night_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': night_light_brightness }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': night_light_colour_temperature }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': night_light_rgb_colour }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': night_light_rgbw_colour }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': night_light_rgbww_colour }) %}\n{% endif %} {{ light.data }}",
              "night_light_entities": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_switch_entities": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_scene_entities": "{% set b = night_lights and night_lights.entity_id %} {% if night_boolean_scenes_scripts == [] %}\n  {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% elif is_state(night_boolean_scenes_scripts, 'off') %}\n  {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_script_entities": "{% set b = night_lights and night_lights.entity_id %} {% if night_boolean_scenes_scripts == [] %}\n  {{ expand(b) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% elif is_state(night_boolean_scenes_scripts, 'off') %}\n  {{ expand(b) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_boolean_scenes_scripts_helper": "{% if night_boolean_scenes_scripts | length > 0 and states(night_boolean_scenes_scripts) == 'off' %}\n  {{ night_boolean_scenes_scripts }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_light": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_switch": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_light_on": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_light": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_switch": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_light_on": "{% set a = light_switch.entity_id %} {% if a %}\n  {{ expand(a) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}"
            },
            "trigger": [
              {
                "platform": "state",
                "id": "t0",
                "entity_id": [
                  "binary_sensor.bedroom_contact"
                ],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "numeric_state",
                "id": "t1",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "below": -1.5
              },
              {
                "platform": "numeric_state",
                "id": "t2",
                "entity_id": [],
                "below": 20
              },
              {
                "platform": "time",
                "id": "t3",
                "at": "00:00:00"
              },
              {
                "platform": "state",
                "id": "t4",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "time",
                "id": "t5",
                "at": "00:00:00"
              },
              {
                "platform": "numeric_state",
                "id": "t6",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "below": -1.5
              },
              {
                "platform": "state",
                "id": "t7_on",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t7_off",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t7_stop",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t8_on",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "state",
                "id": "t8_off",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "state",
                "id": "t8_stop",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "numeric_state",
                "id": "t9",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "above": -4.0
              },
              {
                "platform": "numeric_state",
                "id": "t10",
                "entity_id": [],
                "above": 80
              },
              {
                "platform": "time",
                "id": "t11",
                "at": "00:00:00"
              },
              {
                "platform": "state",
                "id": "t12",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "time",
                "id": "t13",
                "at": "00:00:00"
              },
              {
                "platform": "numeric_state",
                "id": "t14",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "above": -4.0
              },
              {
                "platform": "homeassistant",
                "id": "t15",
                "event": "start"
              }
            ],
            "condition": [
              {
                "condition": "or",
                "conditions": [
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "trigger",
                        "id": "t0"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_sun == 'sun_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t1"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_ambient == 'ambient_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t2"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_time == 'time_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t3"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t4"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'entity_state_enabled' in night_lights_conditions }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t5"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'time_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t6"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'sun_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_on"
                      },
                      "{{ 'bypass_enabled_turn_on' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_off"
                      },
                      "{{ 'bypass_enabled_turn_off' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_stop"
                      },
                      "{{ 'bypass_enabled_stop' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_on"
                      },
                      "{{ 'bypass_enabled_turn_on' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_off"
                      },
                      "{{ 'bypass_enabled_turn_off' in  include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_stop"
                      },
                      "{{ 'bypass_enabled_stop' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t9"
                      },
                      "{{ include_sun == 'sun_enabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t10"
                      },
                      "{{ include_ambient == 'ambient_enabled' }}",
                      "{{ ambient_light_options == 'ambient_light_option_disabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t11"
                      },
                      "{{ include_time == 'time_enabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t12"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'entity_state_enabled' in night_lights_conditions }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t13"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'time_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t14"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'sun_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t15"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "trigger",
                        "id": "t15"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}",
                      {
                        "condition": "trigger",
                        "id": "t15"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          },
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          },
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_bypass == [] }}",
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t15"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_sun == 'sun_disabled' }}",
                  "{{ include_sun == 'sun_enabled_night_lights' }}",
                  "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= sun_elevation | float(90)) }}",
                  "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= sun_elevation_rising | float(90)) }}",
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t9"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_ambient == 'ambient_disabled' }}",
                  "{{ ambient_light_sensor == [] }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_value | int) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and ((include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and ((include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}",
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t10"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_time == 'time_disabled' }}",
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "time",
                        "after": "00:00:00",
                        "before": "00:00:00",
                        "weekday": [
                          "mon",
                          "tue",
                          "wed",
                          "thu",
                          "fri",
                          "sat",
                          "sun"
                        ]
                      },
                      "{{ include_time == 'time_enabled' }}"
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t11"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_device_tracker == 'device_tracker_disabled' }}",
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "numeric_state",
                        "entity_id": [],
                        "above": 0
                      },
                      "{{ include_device_tracker == 'zone_enabled' }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (state_attr(zone, 'persons') + people) | count != dict.fromkeys(state_attr(zone, 'persons') + people) | count }}",
                      "{{ include_device_tracker == 'zone_people_enabled' }}"
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop"
                    ]
                  }
                ]
              }
            ],
            "action": [
              {
                "choose": [
                  {
                    "alias": "Check if night lights are enabled and within conditions",
                    "conditions": [
                      {
                        "condition": "and",
                        "conditions": [
                          {
                            "alias": "Check if night lights is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ 'night_lights_enabled' in include_night_lights }}"
                            ]
                          },
                          {
                            "alias": "Check if night lights entity state is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('time_enabled' in night_lights_conditions) and not ('entity_state_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions) and not ('entity_state_enabled' in night_lights_conditions) }}",
                              {
                                "condition": "and",
                                "conditions": [
                                  "{{ 'entity_state_enabled' in night_lights_conditions }}",
                                  {
                                    "condition": "state",
                                    "entity_id": [],
                                    "state": "on",
                                    "match": "any"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Check if night lights time is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('entity_state_enabled' in night_lights_conditions)  and not ('time_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions)  and not ('time_enabled' in night_lights_conditions) }}",
                              {
                                "condition": "and",
                                "conditions": [
                                  "{{ 'time_enabled' in night_lights_conditions }}",
                                  {
                                    "condition": "time",
                                    "after": "00:00:00",
                                    "before": "00:00:00"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Check if night lights sun is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('entity_state_enabled' in night_lights_conditions)  and not ('sun_enabled' in night_lights_conditions) }}",
                              "{{ ('time_enabled' in night_lights_conditions)  and not ('sun_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions) and (((is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= night_lights_sun_elevation | float(90))) or ((is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= night_lights_sun_elevation_rising | float(90)))) }}"
                            ]
                          }
                        ]
                      }
                    ],
                    "sequence": [
                      {
                        "choose": [
                          {
                            "alias": "By-pass is turned on & check by-pass option - Turn lights off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_off"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass time delay",
                                "delay": {
                                  "minutes": 0
                                }
                              },
                              {
                                "choose": [
                                  {
                                    "alias": "If transition is selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "data": {
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}",
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "If transition is not selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "Turn off the switches",
                                "target": {
                                  "entity_id": "{{ night_switch_entities }}"
                                },
                                "action": "switch.turn_off"
                              },
                              {
                                "alias": "Turn off the script",
                                "data": {
                                  "entity_id": "{{ end_script_entities }}"
                                },
                                "action": "script.turn_on"
                              },
                              {
                                "alias": "Turn off the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "alias": "Turn off the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "By-pass is turned on & check by-pass option - Keep the current lights state",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_stop"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "By-pass is turned off & check if the motion trigger is off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t8_on",
                                  "t8_off",
                                  "t8_stop"
                                ]
                              },
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "match": "all",
                                "state": "off"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass time delay",
                                        "delay": {
                                          "minutes": 0
                                        }
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "data": {
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}",
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ night_switch_entities }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Motion trigger is off and check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass settings and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "By-pass is turned off & check if the motion trigger is on",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t8_on",
                                  "t8_off",
                                  "t8_stop"
                                ]
                              },
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "match": "any",
                                "state": "on"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off and check conditions if enabled",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          "{{ (include_sun == 'sun_enabled') and (state_attr('sun.sun','elevation') >= sun_elevation | float(90)) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_disabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (is_state(night_boolean_scenes_scripts, 'off')) }}",
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              {
                                                "condition": "time",
                                                "after": "00:00:00",
                                                "before": "00:00:00"
                                              },
                                              "{{ include_time == 'time_enabled' }}"
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass time delay",
                                        "delay": {
                                          "minutes": 0
                                        }
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "data": {
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}",
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ night_switch_entities }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Motion trigger is on and check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass settings and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "Sun, ambient & time above setting to turn off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t9",
                                  "t10",
                                  "t11"
                                ]
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "If transition is selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "data": {
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}",
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "If transition is not selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "Turn off the switches",
                                "target": {
                                  "entity_id": "{{ night_switch_entities }}"
                                },
                                "action": "switch.turn_off"
                              },
                              {
                                "alias": "Turn off the script",
                                "data": {
                                  "entity_id": "{{ end_script_entities }}"
                                },
                                "action": "script.turn_on"
                              },
                              {
                                "alias": "Turn off the input boolean night lights",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          },
                          {
                            "alias": "Turn off normal lights when trigger by start night lights conditions",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t4",
                                  "t5",
                                  "t6"
                                ]
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "light - switch - scene - script is ON",
                                    "conditions": [
                                      "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (is_state(boolean_scenes_scripts, 'on')) }}"
                                    ],
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_lights_light }}"
                                                },
                                                "data": {
                                                  "transition": "{{ light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_lights_light }}"
                                                },
                                                "action": "light.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ crossover_lights_switch }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "alias": "If transition is selected",
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ 'use_transition' in include_light_control }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the scenes",
                                                        "data": {
                                                          "entity_id": "{{ end_scene_entities }}",
                                                          "transition": "{{ light_transition_off }}"
                                                        },
                                                        "action": "scene.turn_on"
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "alias": "If transition is not selected",
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ 'use_transition' not in include_light_control }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the scenes",
                                                        "data": {
                                                          "entity_id": "{{ end_scene_entities }}"
                                                        },
                                                        "action": "scene.turn_on"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "alias": "Turn off the input boolean normal lights",
                                                "data": {
                                                  "entity_id": []
                                                },
                                                "action": "input_boolean.turn_off"
                                              },
                                              {
                                                "alias": "Turn ON lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_night_lights_light_on }}"
                                                },
                                                "data": "{{ night_light_data }}",
                                                "action": "light.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "light - switch - scene - script is ON",
                                    "conditions": [
                                      "{{ 'manage_scripts_crossing_over' in include_night_light_control }}",
                                      "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (is_state(boolean_scenes_scripts, 'off')) }}"
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Safe Guard when HA restarts",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t15"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off and check conditions if enabled",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Small time delay required",
                                        "delay": {
                                          "seconds": 1
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass auto off is enabled and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn ON lights",
                        "target": {
                          "entity_id": "{{ night_light_entities_off }}"
                        },
                        "data": "{{ night_light_data }}",
                        "action": "light.turn_on"
                      },
                      {
                        "choose": [
                          {
                            "alias": "Check if normal lights scenes or scripts helper is on - This is for scenes only when crossing over",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{% if boolean_scenes_scripts == [] %}\n  false\n{% elif is_state(boolean_scenes_scripts, 'on') %}\n  true\n{% else %}\n  false\n{% endif %}"
                              }
                            ],
                            "sequence": null
                          },
                          {
                            "alias": "If transition is selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn on the night scenes",
                                "target": {
                                  "entity_id": "{{ night_scene_entities }}"
                                },
                                "data": {
                                  "transition": "{{ night_light_transition_on }}"
                                },
                                "action": "scene.turn_on"
                              },
                              {
                                "alias": "Turn on the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": "{{ night_boolean_scenes_scripts_helper }}"
                                },
                                "action": "input_boolean.turn_on"
                              }
                            ]
                          },
                          {
                            "alias": "If transition is not selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn on the night scenes",
                                "target": {
                                  "entity_id": "{{ night_scene_entities }}"
                                },
                                "action": "scene.turn_on"
                              },
                              {
                                "alias": "Turn on the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": "{{ night_boolean_scenes_scripts_helper }}"
                                },
                                "action": "input_boolean.turn_on"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn on the night switches",
                        "target": {
                          "entity_id": "{{ night_switch_entities_off }}"
                        },
                        "action": "switch.turn_on"
                      },
                      {
                        "alias": "Turn on the night scripts",
                        "target": {
                          "entity_id": "{{ night_script_entities }}"
                        },
                        "action": "script.turn_on"
                      },
                      {
                        "choose": [
                          {
                            "alias": "By-pass is enabled & check by-pass option - Turn lights on",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_on"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "Check if the trigger is on and wait for it to go off",
                            "conditions": [
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "state": "on",
                                "match": "any"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Wait until motion sensor is off",
                                "wait_for_trigger": [
                                  {
                                    "platform": "state",
                                    "entity_id": [
                                      "binary_sensor.bedroom_contact"
                                    ],
                                    "from": "on",
                                    "to": "off"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Wait the number of minutes set in the night lights time delay",
                        "delay": {
                          "minutes": 5
                        }
                      },
                      {
                        "choose": [
                          {
                            "alias": "If transition is selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn off the lights",
                                "target": {
                                  "entity_id": "{{ night_light_entities }}"
                                },
                                "data": {
                                  "transition": "{{ night_light_transition_off }}"
                                },
                                "action": "light.turn_off"
                              },
                              {
                                "alias": "Turn off the scenes",
                                "data": {
                                  "entity_id": "{{ end_scene_entities }}",
                                  "transition": "{{ night_light_transition_off }}"
                                },
                                "action": "scene.turn_on"
                              }
                            ]
                          },
                          {
                            "alias": "If transition is not selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn off the lights",
                                "target": {
                                  "entity_id": "{{ night_light_entities }}"
                                },
                                "action": "light.turn_off"
                              },
                              {
                                "alias": "Turn off the scenes",
                                "data": {
                                  "entity_id": "{{ end_scene_entities }}"
                                },
                                "action": "scene.turn_on"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn off the switches",
                        "target": {
                          "entity_id": "{{ night_switch_entities }}"
                        },
                        "action": "switch.turn_off"
                      },
                      {
                        "alias": "Turn off the script",
                        "data": {
                          "entity_id": "{{ end_script_entities }}"
                        },
                        "action": "script.turn_on"
                      },
                      {
                        "alias": "Turn off the boolean for scenes and scripts",
                        "data": {
                          "entity_id": []
                        },
                        "action": "input_boolean.turn_off"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "choose": [
                      {
                        "alias": "By-pass is turned on & check by-pass option - Turn lights off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t7_off"
                          }
                        ],
                        "sequence": [
                          {
                            "alias": "Wait the number of minutes set in the by-pass time delay",
                            "delay": {
                              "minutes": 0
                            }
                          },
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "alias": "Check by-pass settings and preform the correct action",
                            "if": [
                              {
                                "alias": "Check if the by-pass auto off is enabled",
                                "condition": "template",
                                "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                              }
                            ],
                            "then": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                "delay": {
                                  "minutes": 60
                                }
                              },
                              {
                                "alias": "Parallel Actions for the by-pass auto off",
                                "parallel": [
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ],
                            "else": [
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "By-pass is turned on & check by-pass option - Keep the current lights state",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t7_stop"
                          }
                        ],
                        "sequence": [
                          {
                            "alias": "Check by-pass settings and preform the correct action",
                            "if": [
                              {
                                "alias": "Check if the by-pass auto off is enabled",
                                "condition": "template",
                                "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                              }
                            ],
                            "then": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                "delay": {
                                  "minutes": 60
                                }
                              },
                              {
                                "alias": "Parallel Actions for the by-pass auto off",
                                "parallel": [
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ],
                            "else": [
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "choose": [
                      {
                        "alias": "By-pass is turned off & check if the motion trigger is off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t8_on",
                              "t8_off",
                              "t8_stop"
                            ]
                          },
                          {
                            "condition": "state",
                            "entity_id": [
                              "binary_sensor.bedroom_contact"
                            ],
                            "match": "all",
                            "state": "off"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass time delay",
                                    "delay": {
                                      "minutes": 0
                                    }
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "data": {
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}",
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ switch_entities }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              },
                              {
                                "alias": "Motion trigger is off and check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "By-pass is turned off & check if the motion trigger is on",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t8_on",
                              "t8_off",
                              "t8_stop"
                            ]
                          },
                          {
                            "condition": "state",
                            "entity_id": [
                              "binary_sensor.bedroom_contact"
                            ],
                            "match": "any",
                            "state": "on"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off and check conditions if enabled",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      "{{ (include_sun == 'sun_enabled') and (state_attr('sun.sun','elevation') >= sun_elevation | float(90)) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_disabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (is_state(boolean_scenes_scripts, 'off')) }}",
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          {
                                            "condition": "time",
                                            "after": "00:00:00",
                                            "before": "00:00:00"
                                          },
                                          "{{ include_time == 'time_enabled' }}"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass time delay",
                                    "delay": {
                                      "minutes": 0
                                    }
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "data": {
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}",
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ switch_entities }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              },
                              {
                                "alias": "Motion trigger is on and check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "choose": [
                      {
                        "alias": "Sun, ambient & time above setting to turn off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t9",
                              "t10",
                              "t11"
                            ]
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the input boolean night lights",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "stop": "Stop the automation"
                          }
                        ]
                      },
                      {
                        "alias": "Turn off night lights when trigger by end night lights conditions",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t12",
                              "t13",
                              "t14"
                            ]
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (is_state(night_boolean_scenes_scripts, 'on')) }}"
                                ],
                                "sequence": [
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ crossover_night_lights_light }}"
                                            },
                                            "data": {
                                              "transition": "{{ night_light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ crossover_night_lights_light }}"
                                            },
                                            "action": "light.turn_off"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ crossover_night_lights_switch }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "alias": "If transition is selected",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the scenes",
                                                    "data": {
                                                      "entity_id": "{{ end_scene_entities }}",
                                                      "transition": "{{ night_light_transition_off }}"
                                                    },
                                                    "action": "scene.turn_on"
                                                  }
                                                ]
                                              },
                                              {
                                                "alias": "If transition is not selected",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the scenes",
                                                    "data": {
                                                      "entity_id": "{{ end_scene_entities }}"
                                                    },
                                                    "action": "scene.turn_on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "Turn off the input boolean night lights",
                                            "data": {
                                              "entity_id": []
                                            },
                                            "action": "input_boolean.turn_off"
                                          },
                                          {
                                            "choose": [
                                              {
                                                "alias": "Turn ON lights",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ include_dynamic_lighting == 'disable_dynamic_lighting' }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "target": {
                                                      "entity_id": "{{ crossover_lights_light_on }}"
                                                    },
                                                    "data": "{{ light_data }}",
                                                    "action": "light.turn_on"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  "{{ 'manage_scripts_crossing_over' in include_night_light_control }}",
                                  "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (is_state(night_boolean_scenes_scripts, 'off')) }}"
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Safe Guard when HA restarts",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t15"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off and check conditions if enabled",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Small time delay required",
                                    "delay": {
                                      "seconds": 1
                                    }
                                  }
                                ]
                              },
                              {
                                "alias": "Check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass auto off is enabled and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "alias": "Parallel actions for dynamic lighting and normal lights",
                    "parallel": [
                      {
                        "sequence": [
                          {
                            "alias": "Check if the dynamic lighting is enabled",
                            "condition": "and",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ include_dynamic_lighting != 'disable_dynamic_lighting' }}"
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Dynamic Lighting - Input Boolean Helper",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ dynamic_lighting_boolean != [] }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the boolean for dynamic lighting",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "1 - Dynamic Lighting - Lux Controlled Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness'}}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If dynamic lighting brightness is in the dead zone",
                                              "conditions": "{{ in_dead_zone }}",
                                              "sequence": [
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set the dynamic lighting brightness for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "2 - Dynamic Lighting - Lux Controlled Brightness - Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness_inv'}}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and  (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If dynamic lighting brightness is in the dead zone",
                                              "conditions": "{{ in_dead_zone }}",
                                              "sequence": [
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic lighting brightness inverted for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "3 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': light_brightness }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "4 - Dynamic Lighting - Sun Elevation Lighting - Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "5 - Dynamic Lighting - Sun Elevation Lighting - Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness inverted for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "6 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness and dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "7 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness and dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "8 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Lux Controlled Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Parallel actions for dynamic lighting",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                                    "dynamic_kelvin": "{% if expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 %}\n  {% set elevation = state_attr('sun.sun', 'elevation') | float %}\n  {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %}\n  {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %}\n  {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %}\n  {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %}\n  {% if elevation >= -10 %}\n    {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n    {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% else %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% endif %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% endif %}\n  {{ colour_temp_value | round(0) }}\n{% endif %}\n",
                                                    "dynamic_light_off_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Check if the light is off",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is off",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is on",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        },
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If dynamic lighting brightness is in the dead zone",
                                                      "conditions": "{{ in_dead_zone }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness and dynamic sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        },
                                                        "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}"
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_off_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                                      "conditions": "{{ should_wait }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If the lights are OFF",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "9 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Lux Controlled Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Parallel actions for dynamic lighting",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and  (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                                    "dynamic_kelvin": "{% if expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 %}\n  {% set elevation = state_attr('sun.sun', 'elevation') | float %}\n  {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %}\n  {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %}\n  {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %}\n  {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %}\n  {% if elevation >= -10 %}\n    {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n    {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% else %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% endif %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% endif %}\n  {{ colour_temp_value | round(0) }}\n{% endif %}\n",
                                                    "dynamic_light_off_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Check if the light is off",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is off",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is on",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        },
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If dynamic lighting brightness is in the dead zone",
                                                      "conditions": "{{ in_dead_zone }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness and dynamic sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        },
                                                        "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}"
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_off_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                                      "conditions": "{{ should_wait }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If the lights are OFF",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "stop": "Stop the automation"
                          }
                        ]
                      },
                      {
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Turn ON lights",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'disable_dynamic_lighting' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "target": {
                                      "entity_id": "{{ light_entities_off }}"
                                    },
                                    "data": "{{ light_data }}",
                                    "action": "light.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Check if normal lights scenes or scripts helper is on - This is for scenes only when crossing over",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{% if night_boolean_scenes_scripts == [] %}\n  false\n{% elif is_state(night_boolean_scenes_scripts, 'on') %}\n  true\n{% else %}\n  false\n{% endif %}"
                                  }
                                ],
                                "sequence": null
                              },
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the scenes",
                                    "target": {
                                      "entity_id": "{{ scene_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_on }}"
                                    },
                                    "action": "scene.turn_on"
                                  },
                                  {
                                    "alias": "Turn on the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": "{{ boolean_scenes_scripts_helper }}"
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the scenes",
                                    "target": {
                                      "entity_id": "{{ scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  },
                                  {
                                    "alias": "Turn on the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": "{{ boolean_scenes_scripts_helper }}"
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn on the switches",
                            "target": {
                              "entity_id": "{{ switch_entities_off }}"
                            },
                            "action": "switch.turn_on"
                          },
                          {
                            "alias": "Turn on the scripts",
                            "target": {
                              "entity_id": "{{ script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "choose": [
                              {
                                "alias": "By-pass is enabled & check by-pass option - Turn lights on",
                                "conditions": [
                                  {
                                    "condition": "trigger",
                                    "id": "t7_on"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ],
                                    "else": [
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Check if the trigger is on and wait for it to go off",
                                "conditions": [
                                  {
                                    "condition": "state",
                                    "entity_id": [
                                      "binary_sensor.bedroom_contact"
                                    ],
                                    "state": "on",
                                    "match": "any"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait until motion sensor is off",
                                    "wait_for_trigger": [
                                      {
                                        "platform": "state",
                                        "entity_id": [
                                          "binary_sensor.bedroom_contact"
                                        ],
                                        "from": "on",
                                        "to": "off"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Wait the number of minutes set in the normal lights time delay",
                            "delay": {
                              "minutes": 0
                            }
                          },
                          {
                            "choose": [
                              {
                                "alias": "Dynamic Lighting - Input Boolean Helper",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ dynamic_lighting_boolean != [] }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the boolean for dynamic lighting",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "id": "1727066405247",
            "alias": "Sensor Light",
            "description": "light on with door open"
          },
          "blueprint_inputs": {
            "id": "1727066405247",
            "alias": "Sensor Light",
            "description": "light on with door open",
            "use_blueprint": {
              "path": "Blackshome/sensor-light.yaml",
              "input": {
                "motion_trigger": [
                  "binary_sensor.bedroom_contact"
                ],
                "light_switch": {
                  "device_id": "d9614a84d59f0e41e02a56952c58a916",
                  "entity_id": "switch.sonoff_100156cbbb_2"
                },
                "time_delay": 0
              }
            }
          },
          "context": {
            "id": "01J8EJXZANQQP7NQSY21D2G7A8",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/0/default/3/parallel/1/sequence/11",
          "run_id": "5293c48da24dbe52ef487b263918e98c",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2024-09-23T04:41:11.765690+00:00",
            "finish": "2024-09-23T04:41:12.608937+00:00"
          },
          "domain": "automation",
          "item_id": "1727066405247",
          "trigger": "Home Assistant starting"
        }
      },
      {
        "extended_dict": {
          "last_step": "action/0/default/3/parallel/1/sequence/11",
          "run_id": "23940d6ac955e510c75471940394b842",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2024-09-23T04:48:00.236704+00:00",
            "finish": "2024-09-23T04:48:00.754273+00:00"
          },
          "domain": "automation",
          "item_id": "1727066405247",
          "trigger": "Home Assistant starting",
          "trace": {
            "trigger/19": [
              {
                "path": "trigger/19",
                "timestamp": "2024-09-23T04:48:00.241996+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.sensor_light",
                    "state": "on",
                    "attributes": {
                      "id": "1727066405247",
                      "last_triggered": "2024-09-23T04:41:11.773669+00:00",
                      "mode": "restart",
                      "current": 0,
                      "friendly_name": "Sensor Light"
                    },
                    "last_changed": "2024-09-23T04:47:58.329778+00:00",
                    "last_reported": "2024-09-23T04:47:58.329778+00:00",
                    "last_updated": "2024-09-23T04:47:58.329778+00:00",
                    "context": {
                      "id": "01J8EKACBS76TP9HC55MA0HJHE",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "t15",
                    "idx": "19",
                    "alias": null,
                    "platform": "homeassistant",
                    "event": "start",
                    "description": "Home Assistant starting"
                  },
                  "motion_trigger": [
                    "binary_sensor.bedroom_contact"
                  ],
                  "light_switch": {
                    "device_id": "d9614a84d59f0e41e02a56952c58a916",
                    "entity_id": "switch.sonoff_100156cbbb_2"
                  },
                  "boolean_scenes_scripts": [],
                  "end_scenes": [],
                  "time_delay": 0,
                  "include_light_control": [],
                  "light_brightness": 100,
                  "light_transition_on": 1,
                  "light_transition_off": 1,
                  "include_light_colour_control": "disable_colour_control",
                  "light_colour_temperature": 5000,
                  "light_rgb_colour": [
                    255,
                    255,
                    255
                  ],
                  "light_rgbw_colour": [
                    255,
                    255,
                    255,
                    255
                  ],
                  "light_rgbww_colour": [
                    255,
                    255,
                    255,
                    255,
                    255
                  ],
                  "include_dynamic_lighting": "disable_dynamic_lighting",
                  "dynamic_lighting_lux_sensor": [],
                  "dynamic_lighting_max_lux": 400,
                  "dynamic_lighting_min_lux": 40,
                  "dynamic_lighting_max_brightness": 100,
                  "dynamic_lighting_min_brightness": 0,
                  "dynamic_lighting_boolean": [],
                  "dynamic_lighting_max_colour_temp": 5000,
                  "dynamic_lighting_min_colour_temp": 3000,
                  "dynamic_lighting_sun_elevation_start_rising": -1.5,
                  "dynamic_lighting_sun_elevation_end_rising": 15,
                  "dynamic_lighting_sun_elevation_start_falling": 15,
                  "dynamic_lighting_sun_elevation_end_falling": -4.0,
                  "dynamic_lighting_heartbeat": 1,
                  "dynamic_lighting_step_value": 4,
                  "dynamic_lighting_dead_zone": 7,
                  "include_bypass": [],
                  "motion_bypass_lights_on": [],
                  "motion_bypass_lights_off": [],
                  "motion_bypass_lights_stop": [],
                  "bypass_time_delay": 0,
                  "include_bypass_auto_off": [],
                  "bypass_auto_off_delay": 60,
                  "include_sun": "sun_disabled",
                  "sun_elevation": -1.5,
                  "sun_elevation_rising": -4.0,
                  "include_ambient": "ambient_disabled",
                  "ambient_light_sensor": [],
                  "ambient_light_options": "ambient_light_option_disabled",
                  "ambient_light_value": 20,
                  "ambient_light_high_value": 80,
                  "include_time": "time_disabled",
                  "after_time": "00:00:00",
                  "before_time": "00:00:00",
                  "weekday_options": [
                    "mon",
                    "tue",
                    "wed",
                    "thu",
                    "fri",
                    "sat",
                    "sun"
                  ],
                  "include_device_tracker": "device_tracker_disabled",
                  "zone": [],
                  "people": [],
                  "include_night_lights": "night_lights_disabled",
                  "night_lights_conditions": [],
                  "night_lights_entity_state": [],
                  "night_lights_after_time": "00:00:00",
                  "night_lights_before_time": "00:00:00",
                  "night_lights_sun_elevation": -1.5,
                  "night_lights_sun_elevation_rising": -4.0,
                  "night_lights": {},
                  "night_boolean_scenes_scripts": [],
                  "night_time_delay": 5,
                  "include_night_light_control": [],
                  "night_light_brightness": 20,
                  "night_light_transition_on": 1,
                  "night_light_transition_off": 1,
                  "include_night_light_colour_control": "disable_colour_control",
                  "night_light_colour_temperature": 5000,
                  "night_light_rgb_colour": [
                    255,
                    255,
                    255
                  ],
                  "night_light_rgbw_colour": [
                    255,
                    255,
                    255,
                    255
                  ],
                  "night_light_rgbww_colour": [
                    255,
                    255,
                    255,
                    255,
                    255
                  ],
                  "light_entities_off": [],
                  "switch_entities_off": [],
                  "light_data": {},
                  "light_entities": [],
                  "switch_entities": [
                    "switch.sonoff_100156cbbb_2"
                  ],
                  "scene_entities": [],
                  "script_entities": [],
                  "boolean_scenes_scripts_helper": [],
                  "end_scene_entities": [],
                  "end_script_entities": [],
                  "night_light_entities_off": [],
                  "night_switch_entities_off": [],
                  "night_light_data": {},
                  "night_light_entities": [],
                  "night_switch_entities": [],
                  "night_scene_entities": [],
                  "night_script_entities": [],
                  "night_boolean_scenes_scripts_helper": [],
                  "crossover_lights_light": [],
                  "crossover_lights_switch": [],
                  "crossover_night_lights_light_on": [],
                  "crossover_night_lights_light": [],
                  "crossover_night_lights_switch": [],
                  "crossover_lights_light_on": []
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2024-09-23T04:48:00.242067+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/0": [
              {
                "path": "condition/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.242107+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/0/conditions/0": [
              {
                "path": "condition/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.242137+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/0/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/0/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:48:00.242166+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/0/conditions/1": [
              {
                "path": "condition/0/conditions/0/conditions/1",
                "timestamp": "2024-09-23T04:48:00.242254+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1": [
              {
                "path": "condition/0/conditions/1",
                "timestamp": "2024-09-23T04:48:00.242302+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1/conditions/0": [
              {
                "path": "condition/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.242330+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/1/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/1/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:48:00.242357+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/1/conditions/1": [
              {
                "path": "condition/0/conditions/1/conditions/1",
                "timestamp": "2024-09-23T04:48:00.242407+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/2": [
              {
                "path": "condition/0/conditions/2",
                "timestamp": "2024-09-23T04:48:00.242573+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/2/conditions/0": [
              {
                "path": "condition/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T04:48:00.242603+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/2/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/2/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:48:00.242629+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/2/conditions/1": [
              {
                "path": "condition/0/conditions/2/conditions/1",
                "timestamp": "2024-09-23T04:48:00.242676+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/3": [
              {
                "path": "condition/0/conditions/3",
                "timestamp": "2024-09-23T04:48:00.242809+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/3/conditions/0": [
              {
                "path": "condition/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T04:48:00.242837+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/3/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/3/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:48:00.242862+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/3/conditions/1": [
              {
                "path": "condition/0/conditions/3/conditions/1",
                "timestamp": "2024-09-23T04:48:00.242909+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/4": [
              {
                "path": "condition/0/conditions/4",
                "timestamp": "2024-09-23T04:48:00.243038+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/4/conditions/0": [
              {
                "path": "condition/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243066+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/5": [
              {
                "path": "condition/0/conditions/5",
                "timestamp": "2024-09-23T04:48:00.243104+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/5/conditions/0": [
              {
                "path": "condition/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243130+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/6": [
              {
                "path": "condition/0/conditions/6",
                "timestamp": "2024-09-23T04:48:00.243168+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/6/conditions/0": [
              {
                "path": "condition/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243194+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/7": [
              {
                "path": "condition/0/conditions/7",
                "timestamp": "2024-09-23T04:48:00.243230+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/7/conditions/0": [
              {
                "path": "condition/0/conditions/7/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243256+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/8": [
              {
                "path": "condition/0/conditions/8",
                "timestamp": "2024-09-23T04:48:00.243293+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/8/conditions/0": [
              {
                "path": "condition/0/conditions/8/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243320+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/9": [
              {
                "path": "condition/0/conditions/9",
                "timestamp": "2024-09-23T04:48:00.243357+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/9/conditions/0": [
              {
                "path": "condition/0/conditions/9/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243383+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/10": [
              {
                "path": "condition/0/conditions/10",
                "timestamp": "2024-09-23T04:48:00.243419+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/10/conditions/0": [
              {
                "path": "condition/0/conditions/10/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243447+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/11": [
              {
                "path": "condition/0/conditions/11",
                "timestamp": "2024-09-23T04:48:00.243483+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/11/conditions/0": [
              {
                "path": "condition/0/conditions/11/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243510+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/12": [
              {
                "path": "condition/0/conditions/12",
                "timestamp": "2024-09-23T04:48:00.243546+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/12/conditions/0": [
              {
                "path": "condition/0/conditions/12/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243572+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/13": [
              {
                "path": "condition/0/conditions/13",
                "timestamp": "2024-09-23T04:48:00.243609+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/13/conditions/0": [
              {
                "path": "condition/0/conditions/13/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243642+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/14": [
              {
                "path": "condition/0/conditions/14",
                "timestamp": "2024-09-23T04:48:00.243679+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/14/conditions/0": [
              {
                "path": "condition/0/conditions/14/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243706+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/15": [
              {
                "path": "condition/0/conditions/15",
                "timestamp": "2024-09-23T04:48:00.243742+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/15/conditions/0": [
              {
                "path": "condition/0/conditions/15/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243769+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/16": [
              {
                "path": "condition/0/conditions/16",
                "timestamp": "2024-09-23T04:48:00.243805+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/16/conditions/0": [
              {
                "path": "condition/0/conditions/16/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243832+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/17": [
              {
                "path": "condition/0/conditions/17",
                "timestamp": "2024-09-23T04:48:00.243868+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/17/conditions/0": [
              {
                "path": "condition/0/conditions/17/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243895+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/18": [
              {
                "path": "condition/0/conditions/18",
                "timestamp": "2024-09-23T04:48:00.243931+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/18/conditions/0": [
              {
                "path": "condition/0/conditions/18/conditions/0",
                "timestamp": "2024-09-23T04:48:00.243957+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/19": [
              {
                "path": "condition/0/conditions/19",
                "timestamp": "2024-09-23T04:48:00.243993+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/0": [
              {
                "path": "condition/0/conditions/19/conditions/0",
                "timestamp": "2024-09-23T04:48:00.244019+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/1": [
              {
                "path": "condition/0/conditions/19/conditions/1",
                "timestamp": "2024-09-23T04:48:00.244051+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/1/conditions/0": [
              {
                "path": "condition/0/conditions/19/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.244078+00:00",
                "result": {
                  "result": true,
                  "entities": [
                    "switch.sonoff_100156cbbb_2"
                  ]
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2024-09-23T04:48:00.244589+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/conditions/0": [
              {
                "path": "condition/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.244621+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2024-09-23T04:48:00.244754+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/2/conditions/0": [
              {
                "path": "condition/2/conditions/0",
                "timestamp": "2024-09-23T04:48:00.244782+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/3": [
              {
                "path": "condition/3",
                "timestamp": "2024-09-23T04:48:00.244901+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/3/conditions/0": [
              {
                "path": "condition/3/conditions/0",
                "timestamp": "2024-09-23T04:48:00.244928+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/4": [
              {
                "path": "condition/4",
                "timestamp": "2024-09-23T04:48:00.245043+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/4/conditions/0": [
              {
                "path": "condition/4/conditions/0",
                "timestamp": "2024-09-23T04:48:00.245070+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/5": [
              {
                "path": "condition/5",
                "timestamp": "2024-09-23T04:48:00.245202+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/5/conditions/0": [
              {
                "path": "condition/5/conditions/0",
                "timestamp": "2024-09-23T04:48:00.245230+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2024-09-23T04:48:00.245684+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01J8EKAE7CQQP7NQSY21D2G7A8",
                    "parent_id": null,
                    "user_id": null
                  }
                },
                "result": {
                  "choice": "default"
                }
              }
            ],
            "action/0/choose/0": [
              {
                "path": "action/0/choose/0",
                "timestamp": "2024-09-23T04:48:00.246100+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/choose/0/conditions/0": [
              {
                "path": "action/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246139+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/choose/0/conditions/0/conditions/0": [
              {
                "path": "action/0/choose/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246167+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/choose/0/conditions/0/conditions/0/conditions/0": [
              {
                "path": "action/0/choose/0/conditions/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246195+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/0": [
              {
                "path": "action/0/default/0",
                "timestamp": "2024-09-23T04:48:00.246470+00:00"
              }
            ],
            "action/0/default/0/choose/0": [
              {
                "path": "action/0/default/0/choose/0",
                "timestamp": "2024-09-23T04:48:00.246588+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/0/choose/0/conditions/0": [
              {
                "path": "action/0/default/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246617+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/0/choose/1": [
              {
                "path": "action/0/default/0/choose/1",
                "timestamp": "2024-09-23T04:48:00.246659+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/0/choose/1/conditions/0": [
              {
                "path": "action/0/default/0/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246684+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1": [
              {
                "path": "action/0/default/1",
                "timestamp": "2024-09-23T04:48:00.246749+00:00"
              }
            ],
            "action/0/default/1/choose/0": [
              {
                "path": "action/0/default/1/choose/0",
                "timestamp": "2024-09-23T04:48:00.246861+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1/choose/0/conditions/0": [
              {
                "path": "action/0/default/1/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246889+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1/choose/1": [
              {
                "path": "action/0/default/1/choose/1",
                "timestamp": "2024-09-23T04:48:00.246929+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/1/choose/1/conditions/0": [
              {
                "path": "action/0/default/1/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.246954+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2": [
              {
                "path": "action/0/default/2",
                "timestamp": "2024-09-23T04:48:00.247015+00:00",
                "result": {
                  "choice": 2
                }
              }
            ],
            "action/0/default/2/choose/0": [
              {
                "path": "action/0/default/2/choose/0",
                "timestamp": "2024-09-23T04:48:00.247117+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.247144+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/1": [
              {
                "path": "action/0/default/2/choose/1",
                "timestamp": "2024-09-23T04:48:00.247185+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.247210+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2": [
              {
                "path": "action/0/default/2/choose/2",
                "timestamp": "2024-09-23T04:48:00.247246+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/2/choose/2/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/conditions/0",
                "timestamp": "2024-09-23T04:48:00.247271+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0",
                "timestamp": "2024-09-23T04:48:00.248414+00:00"
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0",
                "timestamp": "2024-09-23T04:48:00.249235+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249270+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249297+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249321+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1",
                "timestamp": "2024-09-23T04:48:00.249479+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249505+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2",
                "timestamp": "2024-09-23T04:48:00.249655+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249679+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3",
                "timestamp": "2024-09-23T04:48:00.249797+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249821+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4",
                "timestamp": "2024-09-23T04:48:00.249939+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T04:48:00.249963+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5",
                "timestamp": "2024-09-23T04:48:00.250066+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250089+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6",
                "timestamp": "2024-09-23T04:48:00.250190+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/0/conditions/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250213+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1",
                "timestamp": "2024-09-23T04:48:00.250334+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250361+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250384+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250406+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1",
                "timestamp": "2024-09-23T04:48:00.250512+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250535+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2",
                "timestamp": "2024-09-23T04:48:00.250641+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250664+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3",
                "timestamp": "2024-09-23T04:48:00.250764+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250788+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4",
                "timestamp": "2024-09-23T04:48:00.250887+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T04:48:00.250910+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5",
                "timestamp": "2024-09-23T04:48:00.251006+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T04:48:00.251029+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6",
                "timestamp": "2024-09-23T04:48:00.251127+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6/conditions/0": [
              {
                "path": "action/0/default/2/choose/2/sequence/0/choose/1/conditions/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T04:48:00.251151+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3": [
              {
                "path": "action/0/default/3",
                "timestamp": "2024-09-23T04:48:00.251383+00:00"
              }
            ],
            "action/0/default/3/parallel/0/sequence/0": [
              {
                "path": "action/0/default/3/parallel/0/sequence/0",
                "timestamp": "2024-09-23T04:48:00.253936+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/0/sequence/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/0/sequence/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.254063+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0",
                "timestamp": "2024-09-23T04:48:00.254481+00:00",
                "result": {
                  "choice": 0
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0/choose/0",
                "timestamp": "2024-09-23T04:48:00.254583+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.254611+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/0/choose/0/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/0/choose/0/sequence/0",
                "timestamp": "2024-09-23T04:48:00.254844+00:00",
                "result": {
                  "params": {
                    "domain": "light",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1",
                "timestamp": "2024-09-23T04:48:00.255452+00:00",
                "result": {
                  "choice": 2
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/0",
                "timestamp": "2024-09-23T04:48:00.255950+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.255981+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/1",
                "timestamp": "2024-09-23T04:48:00.256126+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/1/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.256153+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2",
                "timestamp": "2024-09-23T04:48:00.256271+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2/conditions/0",
                "timestamp": "2024-09-23T04:48:00.256297+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/0",
                "timestamp": "2024-09-23T04:48:00.256492+00:00",
                "result": {
                  "params": {
                    "domain": "scene",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/1/choose/2/sequence/1",
                "timestamp": "2024-09-23T04:48:00.256856+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_on",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/2": [
              {
                "path": "action/0/default/3/parallel/1/sequence/2",
                "timestamp": "2024-09-23T04:48:00.257181+00:00",
                "result": {
                  "params": {
                    "domain": "switch",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/3": [
              {
                "path": "action/0/default/3/parallel/1/sequence/3",
                "timestamp": "2024-09-23T04:48:00.257473+00:00",
                "result": {
                  "params": {
                    "domain": "script",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/4": [
              {
                "path": "action/0/default/3/parallel/1/sequence/4",
                "timestamp": "2024-09-23T04:48:00.257759+00:00"
              }
            ],
            "action/0/default/3/parallel/1/sequence/4/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/4/choose/0",
                "timestamp": "2024-09-23T04:48:00.257843+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/4/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/4/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.257871+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/5": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5",
                "timestamp": "2024-09-23T04:48:00.257933+00:00"
              }
            ],
            "action/0/default/3/parallel/1/sequence/5/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5/choose/0",
                "timestamp": "2024-09-23T04:48:00.258005+00:00",
                "result": {
                  "result": null
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.258031+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0/entity_id/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/5/choose/0/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T04:48:00.258056+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "action/0/default/3/parallel/1/sequence/6": [
              {
                "path": "action/0/default/3/parallel/1/sequence/6",
                "timestamp": "2024-09-23T04:48:00.258538+00:00",
                "result": {
                  "delay": 0.0,
                  "done": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/7": [
              {
                "path": "action/0/default/3/parallel/1/sequence/7",
                "timestamp": "2024-09-23T04:48:00.259932+00:00"
              }
            ],
            "action/0/default/3/parallel/1/sequence/7/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/7/choose/0",
                "timestamp": "2024-09-23T04:48:00.260057+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/7/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/7/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.260086+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8",
                "timestamp": "2024-09-23T04:48:00.260310+00:00",
                "result": {
                  "choice": 1
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/0",
                "timestamp": "2024-09-23T04:48:00.260383+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/0/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/0/conditions/0",
                "timestamp": "2024-09-23T04:48:00.260410+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1",
                "timestamp": "2024-09-23T04:48:00.260524+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1/conditions/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1/conditions/0",
                "timestamp": "2024-09-23T04:48:00.260550+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/0": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/0",
                "timestamp": "2024-09-23T04:48:00.260773+00:00",
                "result": {
                  "params": {
                    "domain": "light",
                    "service": "turn_off",
                    "service_data": {},
                    "target": {
                      "entity_id": []
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/1": [
              {
                "path": "action/0/default/3/parallel/1/sequence/8/choose/1/sequence/1",
                "timestamp": "2024-09-23T04:48:00.261165+00:00",
                "result": {
                  "params": {
                    "domain": "scene",
                    "service": "turn_on",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/9": [
              {
                "path": "action/0/default/3/parallel/1/sequence/9",
                "timestamp": "2024-09-23T04:48:00.261460+00:00",
                "result": {
                  "params": {
                    "domain": "switch",
                    "service": "turn_off",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "switch.sonoff_100156cbbb_2"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/10": [
              {
                "path": "action/0/default/3/parallel/1/sequence/10",
                "timestamp": "2024-09-23T04:48:00.752759+00:00",
                "result": {
                  "params": {
                    "domain": "script",
                    "service": "turn_on",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": true
                }
              }
            ],
            "action/0/default/3/parallel/1/sequence/11": [
              {
                "path": "action/0/default/3/parallel/1/sequence/11",
                "timestamp": "2024-09-23T04:48:00.753255+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_off",
                    "service_data": {
                      "entity_id": []
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "mode": "restart",
            "max_exceeded": "silent",
            "variables": {
              "motion_trigger": [
                "binary_sensor.bedroom_contact"
              ],
              "light_switch": {
                "device_id": "d9614a84d59f0e41e02a56952c58a916",
                "entity_id": "switch.sonoff_100156cbbb_2"
              },
              "boolean_scenes_scripts": [],
              "end_scenes": [],
              "time_delay": 0,
              "include_light_control": [],
              "light_brightness": 100,
              "light_transition_on": 1,
              "light_transition_off": 1,
              "include_light_colour_control": "disable_colour_control",
              "light_colour_temperature": 5000,
              "light_rgb_colour": [
                255,
                255,
                255
              ],
              "light_rgbw_colour": [
                255,
                255,
                255,
                255
              ],
              "light_rgbww_colour": [
                255,
                255,
                255,
                255,
                255
              ],
              "include_dynamic_lighting": "disable_dynamic_lighting",
              "dynamic_lighting_lux_sensor": [],
              "dynamic_lighting_max_lux": 400,
              "dynamic_lighting_min_lux": 40,
              "dynamic_lighting_max_brightness": 100,
              "dynamic_lighting_min_brightness": 0,
              "dynamic_lighting_boolean": [],
              "dynamic_lighting_max_colour_temp": 5000,
              "dynamic_lighting_min_colour_temp": 3000,
              "dynamic_lighting_sun_elevation_start_rising": -1.5,
              "dynamic_lighting_sun_elevation_end_rising": 15,
              "dynamic_lighting_sun_elevation_start_falling": 15,
              "dynamic_lighting_sun_elevation_end_falling": -4.0,
              "dynamic_lighting_heartbeat": 1,
              "dynamic_lighting_step_value": 4,
              "dynamic_lighting_dead_zone": 7,
              "include_bypass": [],
              "motion_bypass_lights_on": [],
              "motion_bypass_lights_off": [],
              "motion_bypass_lights_stop": [],
              "bypass_time_delay": 0,
              "include_bypass_auto_off": [],
              "bypass_auto_off_delay": 60,
              "include_sun": "sun_disabled",
              "sun_elevation": -1.5,
              "sun_elevation_rising": -4.0,
              "include_ambient": "ambient_disabled",
              "ambient_light_sensor": [],
              "ambient_light_options": "ambient_light_option_disabled",
              "ambient_light_value": 20,
              "ambient_light_high_value": 80,
              "include_time": "time_disabled",
              "after_time": "00:00:00",
              "before_time": "00:00:00",
              "weekday_options": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ],
              "include_device_tracker": "device_tracker_disabled",
              "zone": [],
              "people": [],
              "include_night_lights": "night_lights_disabled",
              "night_lights_conditions": [],
              "night_lights_entity_state": [],
              "night_lights_after_time": "00:00:00",
              "night_lights_before_time": "00:00:00",
              "night_lights_sun_elevation": -1.5,
              "night_lights_sun_elevation_rising": -4.0,
              "night_lights": {},
              "night_boolean_scenes_scripts": [],
              "night_time_delay": 5,
              "include_night_light_control": [],
              "night_light_brightness": 20,
              "night_light_transition_on": 1,
              "night_light_transition_off": 1,
              "include_night_light_colour_control": "disable_colour_control",
              "night_light_colour_temperature": 5000,
              "night_light_rgb_colour": [
                255,
                255,
                255
              ],
              "night_light_rgbw_colour": [
                255,
                255,
                255,
                255
              ],
              "night_light_rgbww_colour": [
                255,
                255,
                255,
                255,
                255
              ],
              "light_entities_off": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}",
              "switch_entities_off": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}",
              "light_data": "{% set light = namespace(data={}) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': light_brightness }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}",
              "light_entities": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}",
              "switch_entities": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}",
              "scene_entities": "{% set a = light_switch.entity_id %} {% if boolean_scenes_scripts == [] %}\n  {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% elif is_state(boolean_scenes_scripts, 'off') %}\n  {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "script_entities": "{% set a = light_switch.entity_id %} {% if boolean_scenes_scripts == [] %}\n  {{ expand(a) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% elif is_state(boolean_scenes_scripts, 'off') %}\n  {{ expand(a) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "boolean_scenes_scripts_helper": "{% if boolean_scenes_scripts | length > 0 and states(boolean_scenes_scripts) == 'off' %}\n  {{ boolean_scenes_scripts }}\n{% else %}\n  []\n{% endif %}",
              "end_scene_entities": "{{ end_scenes | select('match', '^scene\\..*') | list }}",
              "end_script_entities": "{{ end_scenes | select('match', '^script\\..*') | list }}",
              "night_light_entities_off": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_switch_entities_off": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_light_data": "{% set light = namespace(data={}) %} {% if 'use_transition' in include_night_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': night_light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_night_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': night_light_brightness }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': night_light_colour_temperature }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': night_light_rgb_colour }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': night_light_rgbw_colour }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': night_light_rgbww_colour }) %}\n{% endif %} {{ light.data }}",
              "night_light_entities": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_switch_entities": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_scene_entities": "{% set b = night_lights and night_lights.entity_id %} {% if night_boolean_scenes_scripts == [] %}\n  {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% elif is_state(night_boolean_scenes_scripts, 'off') %}\n  {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_script_entities": "{% set b = night_lights and night_lights.entity_id %} {% if night_boolean_scenes_scripts == [] %}\n  {{ expand(b) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% elif is_state(night_boolean_scenes_scripts, 'off') %}\n  {{ expand(b) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_boolean_scenes_scripts_helper": "{% if night_boolean_scenes_scripts | length > 0 and states(night_boolean_scenes_scripts) == 'off' %}\n  {{ night_boolean_scenes_scripts }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_light": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_switch": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_light_on": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_light": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_switch": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_light_on": "{% set a = light_switch.entity_id %} {% if a %}\n  {{ expand(a) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}"
            },
            "trigger": [
              {
                "platform": "state",
                "id": "t0",
                "entity_id": [
                  "binary_sensor.bedroom_contact"
                ],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "numeric_state",
                "id": "t1",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "below": -1.5
              },
              {
                "platform": "numeric_state",
                "id": "t2",
                "entity_id": [],
                "below": 20
              },
              {
                "platform": "time",
                "id": "t3",
                "at": "00:00:00"
              },
              {
                "platform": "state",
                "id": "t4",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "time",
                "id": "t5",
                "at": "00:00:00"
              },
              {
                "platform": "numeric_state",
                "id": "t6",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "below": -1.5
              },
              {
                "platform": "state",
                "id": "t7_on",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t7_off",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t7_stop",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t8_on",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "state",
                "id": "t8_off",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "state",
                "id": "t8_stop",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "numeric_state",
                "id": "t9",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "above": -4.0
              },
              {
                "platform": "numeric_state",
                "id": "t10",
                "entity_id": [],
                "above": 80
              },
              {
                "platform": "time",
                "id": "t11",
                "at": "00:00:00"
              },
              {
                "platform": "state",
                "id": "t12",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "time",
                "id": "t13",
                "at": "00:00:00"
              },
              {
                "platform": "numeric_state",
                "id": "t14",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "above": -4.0
              },
              {
                "platform": "homeassistant",
                "id": "t15",
                "event": "start"
              }
            ],
            "condition": [
              {
                "condition": "or",
                "conditions": [
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "trigger",
                        "id": "t0"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_sun == 'sun_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t1"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_ambient == 'ambient_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t2"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_time == 'time_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t3"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t4"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'entity_state_enabled' in night_lights_conditions }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t5"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'time_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t6"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'sun_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_on"
                      },
                      "{{ 'bypass_enabled_turn_on' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_off"
                      },
                      "{{ 'bypass_enabled_turn_off' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_stop"
                      },
                      "{{ 'bypass_enabled_stop' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_on"
                      },
                      "{{ 'bypass_enabled_turn_on' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_off"
                      },
                      "{{ 'bypass_enabled_turn_off' in  include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_stop"
                      },
                      "{{ 'bypass_enabled_stop' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t9"
                      },
                      "{{ include_sun == 'sun_enabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t10"
                      },
                      "{{ include_ambient == 'ambient_enabled' }}",
                      "{{ ambient_light_options == 'ambient_light_option_disabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t11"
                      },
                      "{{ include_time == 'time_enabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t12"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'entity_state_enabled' in night_lights_conditions }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t13"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'time_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t14"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'sun_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t15"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "trigger",
                        "id": "t15"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}",
                      {
                        "condition": "trigger",
                        "id": "t15"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          },
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          },
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_bypass == [] }}",
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t15"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_sun == 'sun_disabled' }}",
                  "{{ include_sun == 'sun_enabled_night_lights' }}",
                  "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= sun_elevation | float(90)) }}",
                  "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= sun_elevation_rising | float(90)) }}",
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t9"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_ambient == 'ambient_disabled' }}",
                  "{{ ambient_light_sensor == [] }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_value | int) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and ((include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and ((include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}",
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t10"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_time == 'time_disabled' }}",
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "time",
                        "after": "00:00:00",
                        "before": "00:00:00",
                        "weekday": [
                          "mon",
                          "tue",
                          "wed",
                          "thu",
                          "fri",
                          "sat",
                          "sun"
                        ]
                      },
                      "{{ include_time == 'time_enabled' }}"
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t11"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_device_tracker == 'device_tracker_disabled' }}",
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "numeric_state",
                        "entity_id": [],
                        "above": 0
                      },
                      "{{ include_device_tracker == 'zone_enabled' }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (state_attr(zone, 'persons') + people) | count != dict.fromkeys(state_attr(zone, 'persons') + people) | count }}",
                      "{{ include_device_tracker == 'zone_people_enabled' }}"
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop"
                    ]
                  }
                ]
              }
            ],
            "action": [
              {
                "choose": [
                  {
                    "alias": "Check if night lights are enabled and within conditions",
                    "conditions": [
                      {
                        "condition": "and",
                        "conditions": [
                          {
                            "alias": "Check if night lights is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ 'night_lights_enabled' in include_night_lights }}"
                            ]
                          },
                          {
                            "alias": "Check if night lights entity state is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('time_enabled' in night_lights_conditions) and not ('entity_state_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions) and not ('entity_state_enabled' in night_lights_conditions) }}",
                              {
                                "condition": "and",
                                "conditions": [
                                  "{{ 'entity_state_enabled' in night_lights_conditions }}",
                                  {
                                    "condition": "state",
                                    "entity_id": [],
                                    "state": "on",
                                    "match": "any"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Check if night lights time is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('entity_state_enabled' in night_lights_conditions)  and not ('time_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions)  and not ('time_enabled' in night_lights_conditions) }}",
                              {
                                "condition": "and",
                                "conditions": [
                                  "{{ 'time_enabled' in night_lights_conditions }}",
                                  {
                                    "condition": "time",
                                    "after": "00:00:00",
                                    "before": "00:00:00"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Check if night lights sun is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('entity_state_enabled' in night_lights_conditions)  and not ('sun_enabled' in night_lights_conditions) }}",
                              "{{ ('time_enabled' in night_lights_conditions)  and not ('sun_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions) and (((is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= night_lights_sun_elevation | float(90))) or ((is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= night_lights_sun_elevation_rising | float(90)))) }}"
                            ]
                          }
                        ]
                      }
                    ],
                    "sequence": [
                      {
                        "choose": [
                          {
                            "alias": "By-pass is turned on & check by-pass option - Turn lights off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_off"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass time delay",
                                "delay": {
                                  "minutes": 0
                                }
                              },
                              {
                                "choose": [
                                  {
                                    "alias": "If transition is selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "data": {
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}",
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "If transition is not selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "Turn off the switches",
                                "target": {
                                  "entity_id": "{{ night_switch_entities }}"
                                },
                                "action": "switch.turn_off"
                              },
                              {
                                "alias": "Turn off the script",
                                "data": {
                                  "entity_id": "{{ end_script_entities }}"
                                },
                                "action": "script.turn_on"
                              },
                              {
                                "alias": "Turn off the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "alias": "Turn off the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "By-pass is turned on & check by-pass option - Keep the current lights state",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_stop"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "By-pass is turned off & check if the motion trigger is off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t8_on",
                                  "t8_off",
                                  "t8_stop"
                                ]
                              },
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "match": "all",
                                "state": "off"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass time delay",
                                        "delay": {
                                          "minutes": 0
                                        }
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "data": {
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}",
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ night_switch_entities }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Motion trigger is off and check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass settings and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "By-pass is turned off & check if the motion trigger is on",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t8_on",
                                  "t8_off",
                                  "t8_stop"
                                ]
                              },
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "match": "any",
                                "state": "on"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off and check conditions if enabled",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          "{{ (include_sun == 'sun_enabled') and (state_attr('sun.sun','elevation') >= sun_elevation | float(90)) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_disabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (is_state(night_boolean_scenes_scripts, 'off')) }}",
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              {
                                                "condition": "time",
                                                "after": "00:00:00",
                                                "before": "00:00:00"
                                              },
                                              "{{ include_time == 'time_enabled' }}"
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass time delay",
                                        "delay": {
                                          "minutes": 0
                                        }
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "data": {
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}",
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ night_switch_entities }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Motion trigger is on and check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass settings and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "Sun, ambient & time above setting to turn off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t9",
                                  "t10",
                                  "t11"
                                ]
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "If transition is selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "data": {
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}",
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "If transition is not selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "Turn off the switches",
                                "target": {
                                  "entity_id": "{{ night_switch_entities }}"
                                },
                                "action": "switch.turn_off"
                              },
                              {
                                "alias": "Turn off the script",
                                "data": {
                                  "entity_id": "{{ end_script_entities }}"
                                },
                                "action": "script.turn_on"
                              },
                              {
                                "alias": "Turn off the input boolean night lights",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          },
                          {
                            "alias": "Turn off normal lights when trigger by start night lights conditions",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t4",
                                  "t5",
                                  "t6"
                                ]
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "light - switch - scene - script is ON",
                                    "conditions": [
                                      "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (is_state(boolean_scenes_scripts, 'on')) }}"
                                    ],
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_lights_light }}"
                                                },
                                                "data": {
                                                  "transition": "{{ light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_lights_light }}"
                                                },
                                                "action": "light.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ crossover_lights_switch }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "alias": "If transition is selected",
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ 'use_transition' in include_light_control }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the scenes",
                                                        "data": {
                                                          "entity_id": "{{ end_scene_entities }}",
                                                          "transition": "{{ light_transition_off }}"
                                                        },
                                                        "action": "scene.turn_on"
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "alias": "If transition is not selected",
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ 'use_transition' not in include_light_control }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the scenes",
                                                        "data": {
                                                          "entity_id": "{{ end_scene_entities }}"
                                                        },
                                                        "action": "scene.turn_on"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "alias": "Turn off the input boolean normal lights",
                                                "data": {
                                                  "entity_id": []
                                                },
                                                "action": "input_boolean.turn_off"
                                              },
                                              {
                                                "alias": "Turn ON lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_night_lights_light_on }}"
                                                },
                                                "data": "{{ night_light_data }}",
                                                "action": "light.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "light - switch - scene - script is ON",
                                    "conditions": [
                                      "{{ 'manage_scripts_crossing_over' in include_night_light_control }}",
                                      "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (is_state(boolean_scenes_scripts, 'off')) }}"
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Safe Guard when HA restarts",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t15"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off and check conditions if enabled",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Small time delay required",
                                        "delay": {
                                          "seconds": 1
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass auto off is enabled and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn ON lights",
                        "target": {
                          "entity_id": "{{ night_light_entities_off }}"
                        },
                        "data": "{{ night_light_data }}",
                        "action": "light.turn_on"
                      },
                      {
                        "choose": [
                          {
                            "alias": "Check if normal lights scenes or scripts helper is on - This is for scenes only when crossing over",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{% if boolean_scenes_scripts == [] %}\n  false\n{% elif is_state(boolean_scenes_scripts, 'on') %}\n  true\n{% else %}\n  false\n{% endif %}"
                              }
                            ],
                            "sequence": null
                          },
                          {
                            "alias": "If transition is selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn on the night scenes",
                                "target": {
                                  "entity_id": "{{ night_scene_entities }}"
                                },
                                "data": {
                                  "transition": "{{ night_light_transition_on }}"
                                },
                                "action": "scene.turn_on"
                              },
                              {
                                "alias": "Turn on the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": "{{ night_boolean_scenes_scripts_helper }}"
                                },
                                "action": "input_boolean.turn_on"
                              }
                            ]
                          },
                          {
                            "alias": "If transition is not selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn on the night scenes",
                                "target": {
                                  "entity_id": "{{ night_scene_entities }}"
                                },
                                "action": "scene.turn_on"
                              },
                              {
                                "alias": "Turn on the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": "{{ night_boolean_scenes_scripts_helper }}"
                                },
                                "action": "input_boolean.turn_on"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn on the night switches",
                        "target": {
                          "entity_id": "{{ night_switch_entities_off }}"
                        },
                        "action": "switch.turn_on"
                      },
                      {
                        "alias": "Turn on the night scripts",
                        "target": {
                          "entity_id": "{{ night_script_entities }}"
                        },
                        "action": "script.turn_on"
                      },
                      {
                        "choose": [
                          {
                            "alias": "By-pass is enabled & check by-pass option - Turn lights on",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_on"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "Check if the trigger is on and wait for it to go off",
                            "conditions": [
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "state": "on",
                                "match": "any"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Wait until motion sensor is off",
                                "wait_for_trigger": [
                                  {
                                    "platform": "state",
                                    "entity_id": [
                                      "binary_sensor.bedroom_contact"
                                    ],
                                    "from": "on",
                                    "to": "off"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Wait the number of minutes set in the night lights time delay",
                        "delay": {
                          "minutes": 5
                        }
                      },
                      {
                        "choose": [
                          {
                            "alias": "If transition is selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn off the lights",
                                "target": {
                                  "entity_id": "{{ night_light_entities }}"
                                },
                                "data": {
                                  "transition": "{{ night_light_transition_off }}"
                                },
                                "action": "light.turn_off"
                              },
                              {
                                "alias": "Turn off the scenes",
                                "data": {
                                  "entity_id": "{{ end_scene_entities }}",
                                  "transition": "{{ night_light_transition_off }}"
                                },
                                "action": "scene.turn_on"
                              }
                            ]
                          },
                          {
                            "alias": "If transition is not selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn off the lights",
                                "target": {
                                  "entity_id": "{{ night_light_entities }}"
                                },
                                "action": "light.turn_off"
                              },
                              {
                                "alias": "Turn off the scenes",
                                "data": {
                                  "entity_id": "{{ end_scene_entities }}"
                                },
                                "action": "scene.turn_on"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn off the switches",
                        "target": {
                          "entity_id": "{{ night_switch_entities }}"
                        },
                        "action": "switch.turn_off"
                      },
                      {
                        "alias": "Turn off the script",
                        "data": {
                          "entity_id": "{{ end_script_entities }}"
                        },
                        "action": "script.turn_on"
                      },
                      {
                        "alias": "Turn off the boolean for scenes and scripts",
                        "data": {
                          "entity_id": []
                        },
                        "action": "input_boolean.turn_off"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "choose": [
                      {
                        "alias": "By-pass is turned on & check by-pass option - Turn lights off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t7_off"
                          }
                        ],
                        "sequence": [
                          {
                            "alias": "Wait the number of minutes set in the by-pass time delay",
                            "delay": {
                              "minutes": 0
                            }
                          },
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "alias": "Check by-pass settings and preform the correct action",
                            "if": [
                              {
                                "alias": "Check if the by-pass auto off is enabled",
                                "condition": "template",
                                "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                              }
                            ],
                            "then": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                "delay": {
                                  "minutes": 60
                                }
                              },
                              {
                                "alias": "Parallel Actions for the by-pass auto off",
                                "parallel": [
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ],
                            "else": [
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "By-pass is turned on & check by-pass option - Keep the current lights state",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t7_stop"
                          }
                        ],
                        "sequence": [
                          {
                            "alias": "Check by-pass settings and preform the correct action",
                            "if": [
                              {
                                "alias": "Check if the by-pass auto off is enabled",
                                "condition": "template",
                                "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                              }
                            ],
                            "then": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                "delay": {
                                  "minutes": 60
                                }
                              },
                              {
                                "alias": "Parallel Actions for the by-pass auto off",
                                "parallel": [
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ],
                            "else": [
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "choose": [
                      {
                        "alias": "By-pass is turned off & check if the motion trigger is off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t8_on",
                              "t8_off",
                              "t8_stop"
                            ]
                          },
                          {
                            "condition": "state",
                            "entity_id": [
                              "binary_sensor.bedroom_contact"
                            ],
                            "match": "all",
                            "state": "off"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass time delay",
                                    "delay": {
                                      "minutes": 0
                                    }
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "data": {
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}",
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ switch_entities }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              },
                              {
                                "alias": "Motion trigger is off and check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "By-pass is turned off & check if the motion trigger is on",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t8_on",
                              "t8_off",
                              "t8_stop"
                            ]
                          },
                          {
                            "condition": "state",
                            "entity_id": [
                              "binary_sensor.bedroom_contact"
                            ],
                            "match": "any",
                            "state": "on"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off and check conditions if enabled",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      "{{ (include_sun == 'sun_enabled') and (state_attr('sun.sun','elevation') >= sun_elevation | float(90)) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_disabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (is_state(boolean_scenes_scripts, 'off')) }}",
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          {
                                            "condition": "time",
                                            "after": "00:00:00",
                                            "before": "00:00:00"
                                          },
                                          "{{ include_time == 'time_enabled' }}"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass time delay",
                                    "delay": {
                                      "minutes": 0
                                    }
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "data": {
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}",
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ switch_entities }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              },
                              {
                                "alias": "Motion trigger is on and check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "choose": [
                      {
                        "alias": "Sun, ambient & time above setting to turn off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t9",
                              "t10",
                              "t11"
                            ]
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the input boolean night lights",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "stop": "Stop the automation"
                          }
                        ]
                      },
                      {
                        "alias": "Turn off night lights when trigger by end night lights conditions",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t12",
                              "t13",
                              "t14"
                            ]
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (is_state(night_boolean_scenes_scripts, 'on')) }}"
                                ],
                                "sequence": [
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ crossover_night_lights_light }}"
                                            },
                                            "data": {
                                              "transition": "{{ night_light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ crossover_night_lights_light }}"
                                            },
                                            "action": "light.turn_off"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ crossover_night_lights_switch }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "alias": "If transition is selected",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the scenes",
                                                    "data": {
                                                      "entity_id": "{{ end_scene_entities }}",
                                                      "transition": "{{ night_light_transition_off }}"
                                                    },
                                                    "action": "scene.turn_on"
                                                  }
                                                ]
                                              },
                                              {
                                                "alias": "If transition is not selected",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the scenes",
                                                    "data": {
                                                      "entity_id": "{{ end_scene_entities }}"
                                                    },
                                                    "action": "scene.turn_on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "Turn off the input boolean night lights",
                                            "data": {
                                              "entity_id": []
                                            },
                                            "action": "input_boolean.turn_off"
                                          },
                                          {
                                            "choose": [
                                              {
                                                "alias": "Turn ON lights",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ include_dynamic_lighting == 'disable_dynamic_lighting' }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "target": {
                                                      "entity_id": "{{ crossover_lights_light_on }}"
                                                    },
                                                    "data": "{{ light_data }}",
                                                    "action": "light.turn_on"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  "{{ 'manage_scripts_crossing_over' in include_night_light_control }}",
                                  "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (is_state(night_boolean_scenes_scripts, 'off')) }}"
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Safe Guard when HA restarts",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t15"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off and check conditions if enabled",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Small time delay required",
                                    "delay": {
                                      "seconds": 1
                                    }
                                  }
                                ]
                              },
                              {
                                "alias": "Check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass auto off is enabled and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "alias": "Parallel actions for dynamic lighting and normal lights",
                    "parallel": [
                      {
                        "sequence": [
                          {
                            "alias": "Check if the dynamic lighting is enabled",
                            "condition": "and",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ include_dynamic_lighting != 'disable_dynamic_lighting' }}"
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Dynamic Lighting - Input Boolean Helper",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ dynamic_lighting_boolean != [] }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the boolean for dynamic lighting",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "1 - Dynamic Lighting - Lux Controlled Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness'}}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If dynamic lighting brightness is in the dead zone",
                                              "conditions": "{{ in_dead_zone }}",
                                              "sequence": [
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set the dynamic lighting brightness for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "2 - Dynamic Lighting - Lux Controlled Brightness - Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness_inv'}}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and  (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If dynamic lighting brightness is in the dead zone",
                                              "conditions": "{{ in_dead_zone }}",
                                              "sequence": [
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic lighting brightness inverted for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "3 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': light_brightness }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "4 - Dynamic Lighting - Sun Elevation Lighting - Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "5 - Dynamic Lighting - Sun Elevation Lighting - Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness inverted for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "6 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness and dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "7 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness and dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "8 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Lux Controlled Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Parallel actions for dynamic lighting",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                                    "dynamic_kelvin": "{% if expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 %}\n  {% set elevation = state_attr('sun.sun', 'elevation') | float %}\n  {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %}\n  {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %}\n  {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %}\n  {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %}\n  {% if elevation >= -10 %}\n    {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n    {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% else %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% endif %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% endif %}\n  {{ colour_temp_value | round(0) }}\n{% endif %}\n",
                                                    "dynamic_light_off_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Check if the light is off",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is off",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is on",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        },
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If dynamic lighting brightness is in the dead zone",
                                                      "conditions": "{{ in_dead_zone }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness and dynamic sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        },
                                                        "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}"
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_off_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                                      "conditions": "{{ should_wait }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If the lights are OFF",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "9 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Lux Controlled Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Parallel actions for dynamic lighting",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and  (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                                    "dynamic_kelvin": "{% if expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 %}\n  {% set elevation = state_attr('sun.sun', 'elevation') | float %}\n  {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %}\n  {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %}\n  {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %}\n  {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %}\n  {% if elevation >= -10 %}\n    {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n    {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% else %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% endif %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% endif %}\n  {{ colour_temp_value | round(0) }}\n{% endif %}\n",
                                                    "dynamic_light_off_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Check if the light is off",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is off",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is on",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        },
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If dynamic lighting brightness is in the dead zone",
                                                      "conditions": "{{ in_dead_zone }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness and dynamic sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        },
                                                        "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}"
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_off_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                                      "conditions": "{{ should_wait }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If the lights are OFF",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "stop": "Stop the automation"
                          }
                        ]
                      },
                      {
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Turn ON lights",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'disable_dynamic_lighting' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "target": {
                                      "entity_id": "{{ light_entities_off }}"
                                    },
                                    "data": "{{ light_data }}",
                                    "action": "light.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Check if normal lights scenes or scripts helper is on - This is for scenes only when crossing over",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{% if night_boolean_scenes_scripts == [] %}\n  false\n{% elif is_state(night_boolean_scenes_scripts, 'on') %}\n  true\n{% else %}\n  false\n{% endif %}"
                                  }
                                ],
                                "sequence": null
                              },
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the scenes",
                                    "target": {
                                      "entity_id": "{{ scene_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_on }}"
                                    },
                                    "action": "scene.turn_on"
                                  },
                                  {
                                    "alias": "Turn on the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": "{{ boolean_scenes_scripts_helper }}"
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the scenes",
                                    "target": {
                                      "entity_id": "{{ scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  },
                                  {
                                    "alias": "Turn on the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": "{{ boolean_scenes_scripts_helper }}"
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn on the switches",
                            "target": {
                              "entity_id": "{{ switch_entities_off }}"
                            },
                            "action": "switch.turn_on"
                          },
                          {
                            "alias": "Turn on the scripts",
                            "target": {
                              "entity_id": "{{ script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "choose": [
                              {
                                "alias": "By-pass is enabled & check by-pass option - Turn lights on",
                                "conditions": [
                                  {
                                    "condition": "trigger",
                                    "id": "t7_on"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ],
                                    "else": [
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Check if the trigger is on and wait for it to go off",
                                "conditions": [
                                  {
                                    "condition": "state",
                                    "entity_id": [
                                      "binary_sensor.bedroom_contact"
                                    ],
                                    "state": "on",
                                    "match": "any"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait until motion sensor is off",
                                    "wait_for_trigger": [
                                      {
                                        "platform": "state",
                                        "entity_id": [
                                          "binary_sensor.bedroom_contact"
                                        ],
                                        "from": "on",
                                        "to": "off"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Wait the number of minutes set in the normal lights time delay",
                            "delay": {
                              "minutes": 0
                            }
                          },
                          {
                            "choose": [
                              {
                                "alias": "Dynamic Lighting - Input Boolean Helper",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ dynamic_lighting_boolean != [] }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the boolean for dynamic lighting",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "id": "1727066405247",
            "alias": "Sensor Light",
            "description": "light on with door open"
          },
          "blueprint_inputs": {
            "id": "1727066405247",
            "alias": "Sensor Light",
            "description": "light on with door open",
            "use_blueprint": {
              "path": "Blackshome/sensor-light.yaml",
              "input": {
                "motion_trigger": [
                  "binary_sensor.bedroom_contact"
                ],
                "light_switch": {
                  "device_id": "d9614a84d59f0e41e02a56952c58a916",
                  "entity_id": "switch.sonoff_100156cbbb_2"
                },
                "time_delay": 0
              }
            }
          },
          "context": {
            "id": "01J8EKAE7CQQP7NQSY21D2G7A8",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/0/default/3/parallel/1/sequence/11",
          "run_id": "23940d6ac955e510c75471940394b842",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2024-09-23T04:48:00.236704+00:00",
            "finish": "2024-09-23T04:48:00.754273+00:00"
          },
          "domain": "automation",
          "item_id": "1727066405247",
          "trigger": "Home Assistant starting"
        }
      },
      {
        "extended_dict": {
          "last_step": "condition/5/conditions/0",
          "run_id": "ecbb4240a80fcb46e7a4cd7c9da5397d",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2024-09-23T05:07:04.897879+00:00",
            "finish": "2024-09-23T05:07:04.906538+00:00"
          },
          "domain": "automation",
          "item_id": "1727066405247",
          "trigger": "Home Assistant starting",
          "trace": {
            "trigger/19": [
              {
                "path": "trigger/19",
                "timestamp": "2024-09-23T05:07:04.902685+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.sensor_light",
                    "state": "on",
                    "attributes": {
                      "id": "1727066405247",
                      "last_triggered": "2024-09-23T04:48:00.245431+00:00",
                      "mode": "restart",
                      "current": 0,
                      "friendly_name": "Sensor Light"
                    },
                    "last_changed": "2024-09-23T05:07:03.893365+00:00",
                    "last_reported": "2024-09-23T05:07:03.893365+00:00",
                    "last_updated": "2024-09-23T05:07:03.893365+00:00",
                    "context": {
                      "id": "01J8EMDB2NEVGDAZJHW8421GBK",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "t15",
                    "idx": "19",
                    "alias": null,
                    "platform": "homeassistant",
                    "event": "start",
                    "description": "Home Assistant starting"
                  },
                  "motion_trigger": [
                    "binary_sensor.bedroom_contact"
                  ],
                  "light_switch": {
                    "device_id": "d9614a84d59f0e41e02a56952c58a916",
                    "entity_id": "switch.sonoff_100156cbbb_2"
                  },
                  "boolean_scenes_scripts": [],
                  "end_scenes": [],
                  "time_delay": 0,
                  "include_light_control": [],
                  "light_brightness": 100,
                  "light_transition_on": 1,
                  "light_transition_off": 1,
                  "include_light_colour_control": "disable_colour_control",
                  "light_colour_temperature": 5000,
                  "light_rgb_colour": [
                    255,
                    255,
                    255
                  ],
                  "light_rgbw_colour": [
                    255,
                    255,
                    255,
                    255
                  ],
                  "light_rgbww_colour": [
                    255,
                    255,
                    255,
                    255,
                    255
                  ],
                  "include_dynamic_lighting": "disable_dynamic_lighting",
                  "dynamic_lighting_lux_sensor": [],
                  "dynamic_lighting_max_lux": 400,
                  "dynamic_lighting_min_lux": 40,
                  "dynamic_lighting_max_brightness": 100,
                  "dynamic_lighting_min_brightness": 0,
                  "dynamic_lighting_boolean": [],
                  "dynamic_lighting_max_colour_temp": 5000,
                  "dynamic_lighting_min_colour_temp": 3000,
                  "dynamic_lighting_sun_elevation_start_rising": -1.5,
                  "dynamic_lighting_sun_elevation_end_rising": 15,
                  "dynamic_lighting_sun_elevation_start_falling": 15,
                  "dynamic_lighting_sun_elevation_end_falling": -4.0,
                  "dynamic_lighting_heartbeat": 1,
                  "dynamic_lighting_step_value": 4,
                  "dynamic_lighting_dead_zone": 7,
                  "include_bypass": [],
                  "motion_bypass_lights_on": [],
                  "motion_bypass_lights_off": [],
                  "motion_bypass_lights_stop": [],
                  "bypass_time_delay": 0,
                  "include_bypass_auto_off": [],
                  "bypass_auto_off_delay": 60,
                  "include_sun": "sun_disabled",
                  "sun_elevation": -1.5,
                  "sun_elevation_rising": -4.0,
                  "include_ambient": "ambient_disabled",
                  "ambient_light_sensor": [],
                  "ambient_light_options": "ambient_light_option_disabled",
                  "ambient_light_value": 20,
                  "ambient_light_high_value": 80,
                  "include_time": "time_disabled",
                  "after_time": "00:00:00",
                  "before_time": "00:00:00",
                  "weekday_options": [
                    "mon",
                    "tue",
                    "wed",
                    "thu",
                    "fri",
                    "sat",
                    "sun"
                  ],
                  "include_device_tracker": "device_tracker_disabled",
                  "zone": [],
                  "people": [],
                  "include_night_lights": "night_lights_disabled",
                  "night_lights_conditions": [],
                  "night_lights_entity_state": [],
                  "night_lights_after_time": "00:00:00",
                  "night_lights_before_time": "00:00:00",
                  "night_lights_sun_elevation": -1.5,
                  "night_lights_sun_elevation_rising": -4.0,
                  "night_lights": {},
                  "night_boolean_scenes_scripts": [],
                  "night_time_delay": 5,
                  "include_night_light_control": [],
                  "night_light_brightness": 20,
                  "night_light_transition_on": 1,
                  "night_light_transition_off": 1,
                  "include_night_light_colour_control": "disable_colour_control",
                  "night_light_colour_temperature": 5000,
                  "night_light_rgb_colour": [
                    255,
                    255,
                    255
                  ],
                  "night_light_rgbw_colour": [
                    255,
                    255,
                    255,
                    255
                  ],
                  "night_light_rgbww_colour": [
                    255,
                    255,
                    255,
                    255,
                    255
                  ],
                  "light_entities_off": [],
                  "switch_entities_off": [
                    "switch.sonoff_100156cbbb_2"
                  ],
                  "light_data": {},
                  "light_entities": [],
                  "switch_entities": [
                    "switch.sonoff_100156cbbb_2"
                  ],
                  "scene_entities": [],
                  "script_entities": [],
                  "boolean_scenes_scripts_helper": [],
                  "end_scene_entities": [],
                  "end_script_entities": [],
                  "night_light_entities_off": [],
                  "night_switch_entities_off": [],
                  "night_light_data": {},
                  "night_light_entities": [],
                  "night_switch_entities": [],
                  "night_scene_entities": [],
                  "night_script_entities": [],
                  "night_boolean_scenes_scripts_helper": [],
                  "crossover_lights_light": [],
                  "crossover_lights_switch": [],
                  "crossover_night_lights_light_on": [],
                  "crossover_night_lights_light": [],
                  "crossover_night_lights_switch": [],
                  "crossover_lights_light_on": []
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2024-09-23T05:07:04.902745+00:00",
                "error": "In 'or' (item 21 of 22):\n  In 'and' (item 1 of 2):\n    In 'state':\n      In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/0": [
              {
                "path": "condition/0/conditions/0",
                "timestamp": "2024-09-23T05:07:04.902782+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/0/conditions/0": [
              {
                "path": "condition/0/conditions/0/conditions/0",
                "timestamp": "2024-09-23T05:07:04.902809+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/0/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/0/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T05:07:04.902834+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/0/conditions/1": [
              {
                "path": "condition/0/conditions/0/conditions/1",
                "timestamp": "2024-09-23T05:07:04.902911+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1": [
              {
                "path": "condition/0/conditions/1",
                "timestamp": "2024-09-23T05:07:04.902953+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1/conditions/0": [
              {
                "path": "condition/0/conditions/1/conditions/0",
                "timestamp": "2024-09-23T05:07:04.902977+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/1/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/1/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T05:07:04.903004+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/1/conditions/1": [
              {
                "path": "condition/0/conditions/1/conditions/1",
                "timestamp": "2024-09-23T05:07:04.903054+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/2": [
              {
                "path": "condition/0/conditions/2",
                "timestamp": "2024-09-23T05:07:04.903215+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/2/conditions/0": [
              {
                "path": "condition/0/conditions/2/conditions/0",
                "timestamp": "2024-09-23T05:07:04.903241+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/2/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/2/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T05:07:04.903263+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/2/conditions/1": [
              {
                "path": "condition/0/conditions/2/conditions/1",
                "timestamp": "2024-09-23T05:07:04.903304+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/3": [
              {
                "path": "condition/0/conditions/3",
                "timestamp": "2024-09-23T05:07:04.903435+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/3/conditions/0": [
              {
                "path": "condition/0/conditions/3/conditions/0",
                "timestamp": "2024-09-23T05:07:04.903459+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/3/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/3/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T05:07:04.903481+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/3/conditions/1": [
              {
                "path": "condition/0/conditions/3/conditions/1",
                "timestamp": "2024-09-23T05:07:04.903625+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/4": [
              {
                "path": "condition/0/conditions/4",
                "timestamp": "2024-09-23T05:07:04.903753+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/4/conditions/0": [
              {
                "path": "condition/0/conditions/4/conditions/0",
                "timestamp": "2024-09-23T05:07:04.903777+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/5": [
              {
                "path": "condition/0/conditions/5",
                "timestamp": "2024-09-23T05:07:04.903817+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/5/conditions/0": [
              {
                "path": "condition/0/conditions/5/conditions/0",
                "timestamp": "2024-09-23T05:07:04.903839+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/6": [
              {
                "path": "condition/0/conditions/6",
                "timestamp": "2024-09-23T05:07:04.903872+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/6/conditions/0": [
              {
                "path": "condition/0/conditions/6/conditions/0",
                "timestamp": "2024-09-23T05:07:04.903894+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/7": [
              {
                "path": "condition/0/conditions/7",
                "timestamp": "2024-09-23T05:07:04.903927+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/7/conditions/0": [
              {
                "path": "condition/0/conditions/7/conditions/0",
                "timestamp": "2024-09-23T05:07:04.903949+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/8": [
              {
                "path": "condition/0/conditions/8",
                "timestamp": "2024-09-23T05:07:04.903982+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/8/conditions/0": [
              {
                "path": "condition/0/conditions/8/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904006+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/9": [
              {
                "path": "condition/0/conditions/9",
                "timestamp": "2024-09-23T05:07:04.904042+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/9/conditions/0": [
              {
                "path": "condition/0/conditions/9/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904066+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/10": [
              {
                "path": "condition/0/conditions/10",
                "timestamp": "2024-09-23T05:07:04.904098+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/10/conditions/0": [
              {
                "path": "condition/0/conditions/10/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904124+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/11": [
              {
                "path": "condition/0/conditions/11",
                "timestamp": "2024-09-23T05:07:04.904158+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/11/conditions/0": [
              {
                "path": "condition/0/conditions/11/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904182+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/12": [
              {
                "path": "condition/0/conditions/12",
                "timestamp": "2024-09-23T05:07:04.904215+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/12/conditions/0": [
              {
                "path": "condition/0/conditions/12/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904239+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/13": [
              {
                "path": "condition/0/conditions/13",
                "timestamp": "2024-09-23T05:07:04.904433+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/13/conditions/0": [
              {
                "path": "condition/0/conditions/13/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904461+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/14": [
              {
                "path": "condition/0/conditions/14",
                "timestamp": "2024-09-23T05:07:04.904511+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/14/conditions/0": [
              {
                "path": "condition/0/conditions/14/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904536+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/15": [
              {
                "path": "condition/0/conditions/15",
                "timestamp": "2024-09-23T05:07:04.904577+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/15/conditions/0": [
              {
                "path": "condition/0/conditions/15/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904601+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/16": [
              {
                "path": "condition/0/conditions/16",
                "timestamp": "2024-09-23T05:07:04.904631+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/16/conditions/0": [
              {
                "path": "condition/0/conditions/16/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904657+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/17": [
              {
                "path": "condition/0/conditions/17",
                "timestamp": "2024-09-23T05:07:04.904694+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/17/conditions/0": [
              {
                "path": "condition/0/conditions/17/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904716+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/18": [
              {
                "path": "condition/0/conditions/18",
                "timestamp": "2024-09-23T05:07:04.904749+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/18/conditions/0": [
              {
                "path": "condition/0/conditions/18/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904772+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/19": [
              {
                "path": "condition/0/conditions/19",
                "timestamp": "2024-09-23T05:07:04.904803+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/19/conditions/0": [
              {
                "path": "condition/0/conditions/19/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904826+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/19/conditions/1": [
              {
                "path": "condition/0/conditions/19/conditions/1",
                "timestamp": "2024-09-23T05:07:04.904854+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/19/conditions/1/conditions/0": [
              {
                "path": "condition/0/conditions/19/conditions/1/conditions/0",
                "timestamp": "2024-09-23T05:07:04.904877+00:00",
                "result": {
                  "result": false,
                  "entities": [
                    "switch.sonoff_100156cbbb_2"
                  ]
                }
              }
            ],
            "condition/0/conditions/19/conditions/1/conditions/1": [
              {
                "path": "condition/0/conditions/19/conditions/1/conditions/1",
                "timestamp": "2024-09-23T05:07:04.905056+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/19/conditions/1/conditions/2": [
              {
                "path": "condition/0/conditions/19/conditions/1/conditions/2",
                "timestamp": "2024-09-23T05:07:04.905173+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/19/conditions/1/conditions/3": [
              {
                "path": "condition/0/conditions/19/conditions/1/conditions/3",
                "timestamp": "2024-09-23T05:07:04.905278+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/0/conditions/20": [
              {
                "path": "condition/0/conditions/20",
                "timestamp": "2024-09-23T05:07:04.905395+00:00",
                "error": "In 'and' (item 1 of 2):\n  In 'state':\n    In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/20/conditions/0": [
              {
                "path": "condition/0/conditions/20/conditions/0",
                "timestamp": "2024-09-23T05:07:04.905418+00:00",
                "error": "In 'state':\n  In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/20/conditions/0/entity_id/0": [
              {
                "path": "condition/0/conditions/20/conditions/0/entity_id/0",
                "timestamp": "2024-09-23T05:07:04.905440+00:00",
                "error": "In 'state' condition: unknown entity binary_sensor.bedroom_contact"
              }
            ],
            "condition/0/conditions/20/conditions/1": [
              {
                "path": "condition/0/conditions/20/conditions/1",
                "timestamp": "2024-09-23T05:07:04.905483+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/conditions/21": [
              {
                "path": "condition/0/conditions/21",
                "timestamp": "2024-09-23T05:07:04.905520+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/21/conditions/0": [
              {
                "path": "condition/0/conditions/21/conditions/0",
                "timestamp": "2024-09-23T05:07:04.905542+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2024-09-23T05:07:04.905666+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/conditions/0": [
              {
                "path": "condition/1/conditions/0",
                "timestamp": "2024-09-23T05:07:04.905690+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2024-09-23T05:07:04.905791+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/2/conditions/0": [
              {
                "path": "condition/2/conditions/0",
                "timestamp": "2024-09-23T05:07:04.905814+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/3": [
              {
                "path": "condition/3",
                "timestamp": "2024-09-23T05:07:04.905914+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/3/conditions/0": [
              {
                "path": "condition/3/conditions/0",
                "timestamp": "2024-09-23T05:07:04.905937+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/4": [
              {
                "path": "condition/4",
                "timestamp": "2024-09-23T05:07:04.906039+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/4/conditions/0": [
              {
                "path": "condition/4/conditions/0",
                "timestamp": "2024-09-23T05:07:04.906062+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "condition/5": [
              {
                "path": "condition/5",
                "timestamp": "2024-09-23T05:07:04.906165+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/5/conditions/0": [
              {
                "path": "condition/5/conditions/0",
                "timestamp": "2024-09-23T05:07:04.906188+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ]
          },
          "config": {
            "mode": "restart",
            "max_exceeded": "silent",
            "variables": {
              "motion_trigger": [
                "binary_sensor.bedroom_contact"
              ],
              "light_switch": {
                "device_id": "d9614a84d59f0e41e02a56952c58a916",
                "entity_id": "switch.sonoff_100156cbbb_2"
              },
              "boolean_scenes_scripts": [],
              "end_scenes": [],
              "time_delay": 0,
              "include_light_control": [],
              "light_brightness": 100,
              "light_transition_on": 1,
              "light_transition_off": 1,
              "include_light_colour_control": "disable_colour_control",
              "light_colour_temperature": 5000,
              "light_rgb_colour": [
                255,
                255,
                255
              ],
              "light_rgbw_colour": [
                255,
                255,
                255,
                255
              ],
              "light_rgbww_colour": [
                255,
                255,
                255,
                255,
                255
              ],
              "include_dynamic_lighting": "disable_dynamic_lighting",
              "dynamic_lighting_lux_sensor": [],
              "dynamic_lighting_max_lux": 400,
              "dynamic_lighting_min_lux": 40,
              "dynamic_lighting_max_brightness": 100,
              "dynamic_lighting_min_brightness": 0,
              "dynamic_lighting_boolean": [],
              "dynamic_lighting_max_colour_temp": 5000,
              "dynamic_lighting_min_colour_temp": 3000,
              "dynamic_lighting_sun_elevation_start_rising": -1.5,
              "dynamic_lighting_sun_elevation_end_rising": 15,
              "dynamic_lighting_sun_elevation_start_falling": 15,
              "dynamic_lighting_sun_elevation_end_falling": -4.0,
              "dynamic_lighting_heartbeat": 1,
              "dynamic_lighting_step_value": 4,
              "dynamic_lighting_dead_zone": 7,
              "include_bypass": [],
              "motion_bypass_lights_on": [],
              "motion_bypass_lights_off": [],
              "motion_bypass_lights_stop": [],
              "bypass_time_delay": 0,
              "include_bypass_auto_off": [],
              "bypass_auto_off_delay": 60,
              "include_sun": "sun_disabled",
              "sun_elevation": -1.5,
              "sun_elevation_rising": -4.0,
              "include_ambient": "ambient_disabled",
              "ambient_light_sensor": [],
              "ambient_light_options": "ambient_light_option_disabled",
              "ambient_light_value": 20,
              "ambient_light_high_value": 80,
              "include_time": "time_disabled",
              "after_time": "00:00:00",
              "before_time": "00:00:00",
              "weekday_options": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ],
              "include_device_tracker": "device_tracker_disabled",
              "zone": [],
              "people": [],
              "include_night_lights": "night_lights_disabled",
              "night_lights_conditions": [],
              "night_lights_entity_state": [],
              "night_lights_after_time": "00:00:00",
              "night_lights_before_time": "00:00:00",
              "night_lights_sun_elevation": -1.5,
              "night_lights_sun_elevation_rising": -4.0,
              "night_lights": {},
              "night_boolean_scenes_scripts": [],
              "night_time_delay": 5,
              "include_night_light_control": [],
              "night_light_brightness": 20,
              "night_light_transition_on": 1,
              "night_light_transition_off": 1,
              "include_night_light_colour_control": "disable_colour_control",
              "night_light_colour_temperature": 5000,
              "night_light_rgb_colour": [
                255,
                255,
                255
              ],
              "night_light_rgbw_colour": [
                255,
                255,
                255,
                255
              ],
              "night_light_rgbww_colour": [
                255,
                255,
                255,
                255,
                255
              ],
              "light_entities_off": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}",
              "switch_entities_off": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}",
              "light_data": "{% set light = namespace(data={}) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': light_brightness }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}",
              "light_entities": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}",
              "switch_entities": "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}",
              "scene_entities": "{% set a = light_switch.entity_id %} {% if boolean_scenes_scripts == [] %}\n  {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% elif is_state(boolean_scenes_scripts, 'off') %}\n  {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "script_entities": "{% set a = light_switch.entity_id %} {% if boolean_scenes_scripts == [] %}\n  {{ expand(a) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% elif is_state(boolean_scenes_scripts, 'off') %}\n  {{ expand(a) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "boolean_scenes_scripts_helper": "{% if boolean_scenes_scripts | length > 0 and states(boolean_scenes_scripts) == 'off' %}\n  {{ boolean_scenes_scripts }}\n{% else %}\n  []\n{% endif %}",
              "end_scene_entities": "{{ end_scenes | select('match', '^scene\\..*') | list }}",
              "end_script_entities": "{{ end_scenes | select('match', '^script\\..*') | list }}",
              "night_light_entities_off": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_switch_entities_off": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_light_data": "{% set light = namespace(data={}) %} {% if 'use_transition' in include_night_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': night_light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_night_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': night_light_brightness }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': night_light_colour_temperature }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': night_light_rgb_colour }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': night_light_rgbw_colour }) %}\n{% endif %} {% if include_night_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': night_light_rgbww_colour }) %}\n{% endif %} {{ light.data }}",
              "night_light_entities": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_switch_entities": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_scene_entities": "{% set b = night_lights and night_lights.entity_id %} {% if night_boolean_scenes_scripts == [] %}\n  {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% elif is_state(night_boolean_scenes_scripts, 'off') %}\n  {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_script_entities": "{% set b = night_lights and night_lights.entity_id %} {% if night_boolean_scenes_scripts == [] %}\n  {{ expand(b) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% elif is_state(night_boolean_scenes_scripts, 'off') %}\n  {{ expand(b) | selectattr('domain', 'eq', 'script') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "night_boolean_scenes_scripts_helper": "{% if night_boolean_scenes_scripts | length > 0 and states(night_boolean_scenes_scripts) == 'off' %}\n  {{ night_boolean_scenes_scripts }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_light": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_switch": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_light_on": "{% set b =  night_lights and night_lights.entity_id %} {% if b %}\n  {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_light": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_night_lights_switch": "{% set a = light_switch.entity_id %} {% set b =  night_lights and night_lights.entity_id %} {% if a and b %}\n  {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}",
              "crossover_lights_light_on": "{% set a = light_switch.entity_id %} {% if a %}\n  {{ expand(a) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}\n{% else %}\n  []\n{% endif %}"
            },
            "trigger": [
              {
                "platform": "state",
                "id": "t0",
                "entity_id": [
                  "binary_sensor.bedroom_contact"
                ],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "numeric_state",
                "id": "t1",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "below": -1.5
              },
              {
                "platform": "numeric_state",
                "id": "t2",
                "entity_id": [],
                "below": 20
              },
              {
                "platform": "time",
                "id": "t3",
                "at": "00:00:00"
              },
              {
                "platform": "state",
                "id": "t4",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "time",
                "id": "t5",
                "at": "00:00:00"
              },
              {
                "platform": "numeric_state",
                "id": "t6",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "below": -1.5
              },
              {
                "platform": "state",
                "id": "t7_on",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t7_off",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t7_stop",
                "entity_id": [],
                "from": "off",
                "to": "on"
              },
              {
                "platform": "state",
                "id": "t8_on",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "state",
                "id": "t8_off",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "state",
                "id": "t8_stop",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "numeric_state",
                "id": "t9",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "above": -4.0
              },
              {
                "platform": "numeric_state",
                "id": "t10",
                "entity_id": [],
                "above": 80
              },
              {
                "platform": "time",
                "id": "t11",
                "at": "00:00:00"
              },
              {
                "platform": "state",
                "id": "t12",
                "entity_id": [],
                "from": "on",
                "to": "off"
              },
              {
                "platform": "time",
                "id": "t13",
                "at": "00:00:00"
              },
              {
                "platform": "numeric_state",
                "id": "t14",
                "entity_id": "sun.sun",
                "attribute": "elevation",
                "above": -4.0
              },
              {
                "platform": "homeassistant",
                "id": "t15",
                "event": "start"
              }
            ],
            "condition": [
              {
                "condition": "or",
                "conditions": [
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "trigger",
                        "id": "t0"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_sun == 'sun_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t1"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_ambient == 'ambient_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t2"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "state": "on",
                        "match": "any"
                      },
                      "{{ include_time == 'time_enabled' }}",
                      {
                        "condition": "trigger",
                        "id": "t3"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t4"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'entity_state_enabled' in night_lights_conditions }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t5"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'time_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t6"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'sun_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_on"
                      },
                      "{{ 'bypass_enabled_turn_on' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_off"
                      },
                      "{{ 'bypass_enabled_turn_off' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t7_stop"
                      },
                      "{{ 'bypass_enabled_stop' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_on"
                      },
                      "{{ 'bypass_enabled_turn_on' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_off"
                      },
                      "{{ 'bypass_enabled_turn_off' in  include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t8_stop"
                      },
                      "{{ 'bypass_enabled_stop' in include_bypass }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t9"
                      },
                      "{{ include_sun == 'sun_enabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t10"
                      },
                      "{{ include_ambient == 'ambient_enabled' }}",
                      "{{ ambient_light_options == 'ambient_light_option_disabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t11"
                      },
                      "{{ include_time == 'time_enabled' }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t12"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'entity_state_enabled' in night_lights_conditions }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t13"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'time_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t14"
                      },
                      "{{ include_night_lights == 'night_lights_enabled' }}",
                      "{{ 'sun_enabled' in night_lights_conditions }}",
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{{ 'manage_scripts_crossing_over' in include_night_light_control }}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "trigger",
                        "id": "t15"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          "{{ (include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                          {
                            "condition": "template",
                            "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          },
                          {
                            "condition": "template",
                            "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "state",
                        "entity_id": [
                          "binary_sensor.bedroom_contact"
                        ],
                        "match": "any",
                        "state": "on"
                      },
                      {
                        "condition": "trigger",
                        "id": "t15"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}",
                      {
                        "condition": "trigger",
                        "id": "t15"
                      },
                      {
                        "condition": "or",
                        "conditions": [
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          },
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          },
                          {
                            "condition": "state",
                            "entity_id": [],
                            "match": "any",
                            "state": "on"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_bypass == [] }}",
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      },
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                      {
                        "condition": "state",
                        "entity_id": [],
                        "state": "off"
                      }
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t15"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_sun == 'sun_disabled' }}",
                  "{{ include_sun == 'sun_enabled_night_lights' }}",
                  "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= sun_elevation | float(90)) }}",
                  "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= sun_elevation_rising | float(90)) }}",
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t9"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_ambient == 'ambient_disabled' }}",
                  "{{ ambient_light_sensor == [] }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_value | int) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and ((include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}",
                  "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and ((include_night_lights == 'night_lights_enabled') and (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}",
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if boolean_scenes_scripts != [] %}\n  {{ is_state(boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}",
                      {
                        "condition": "template",
                        "value_template": "{% if night_boolean_scenes_scripts != [] %}\n  {{ is_state(night_boolean_scenes_scripts, 'on') }}\n{% endif %}"
                      }
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t10"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_time == 'time_disabled' }}",
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "time",
                        "after": "00:00:00",
                        "before": "00:00:00",
                        "weekday": [
                          "mon",
                          "tue",
                          "wed",
                          "thu",
                          "fri",
                          "sat",
                          "sun"
                        ]
                      },
                      "{{ include_time == 'time_enabled' }}"
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop",
                      "t11"
                    ]
                  }
                ]
              },
              {
                "condition": "or",
                "conditions": [
                  "{{ include_device_tracker == 'device_tracker_disabled' }}",
                  {
                    "condition": "and",
                    "conditions": [
                      {
                        "condition": "numeric_state",
                        "entity_id": [],
                        "above": 0
                      },
                      "{{ include_device_tracker == 'zone_enabled' }}"
                    ]
                  },
                  {
                    "condition": "and",
                    "conditions": [
                      "{{ (state_attr(zone, 'persons') + people) | count != dict.fromkeys(state_attr(zone, 'persons') + people) | count }}",
                      "{{ include_device_tracker == 'zone_people_enabled' }}"
                    ]
                  },
                  {
                    "condition": "trigger",
                    "id": [
                      "t7_on",
                      "t7_off",
                      "t7_stop",
                      "t8_on",
                      "t8_off",
                      "t8_stop"
                    ]
                  }
                ]
              }
            ],
            "action": [
              {
                "choose": [
                  {
                    "alias": "Check if night lights are enabled and within conditions",
                    "conditions": [
                      {
                        "condition": "and",
                        "conditions": [
                          {
                            "alias": "Check if night lights is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ 'night_lights_enabled' in include_night_lights }}"
                            ]
                          },
                          {
                            "alias": "Check if night lights entity state is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('time_enabled' in night_lights_conditions) and not ('entity_state_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions) and not ('entity_state_enabled' in night_lights_conditions) }}",
                              {
                                "condition": "and",
                                "conditions": [
                                  "{{ 'entity_state_enabled' in night_lights_conditions }}",
                                  {
                                    "condition": "state",
                                    "entity_id": [],
                                    "state": "on",
                                    "match": "any"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Check if night lights time is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('entity_state_enabled' in night_lights_conditions)  and not ('time_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions)  and not ('time_enabled' in night_lights_conditions) }}",
                              {
                                "condition": "and",
                                "conditions": [
                                  "{{ 'time_enabled' in night_lights_conditions }}",
                                  {
                                    "condition": "time",
                                    "after": "00:00:00",
                                    "before": "00:00:00"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Check if night lights sun is enabled",
                            "condition": "or",
                            "conditions": [
                              "{{ ('entity_state_enabled' in night_lights_conditions)  and not ('sun_enabled' in night_lights_conditions) }}",
                              "{{ ('time_enabled' in night_lights_conditions)  and not ('sun_enabled' in night_lights_conditions) }}",
                              "{{ ('sun_enabled' in night_lights_conditions) and (((is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= night_lights_sun_elevation | float(90))) or ((is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= night_lights_sun_elevation_rising | float(90)))) }}"
                            ]
                          }
                        ]
                      }
                    ],
                    "sequence": [
                      {
                        "choose": [
                          {
                            "alias": "By-pass is turned on & check by-pass option - Turn lights off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_off"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass time delay",
                                "delay": {
                                  "minutes": 0
                                }
                              },
                              {
                                "choose": [
                                  {
                                    "alias": "If transition is selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "data": {
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}",
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "If transition is not selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "Turn off the switches",
                                "target": {
                                  "entity_id": "{{ night_switch_entities }}"
                                },
                                "action": "switch.turn_off"
                              },
                              {
                                "alias": "Turn off the script",
                                "data": {
                                  "entity_id": "{{ end_script_entities }}"
                                },
                                "action": "script.turn_on"
                              },
                              {
                                "alias": "Turn off the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "alias": "Turn off the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "By-pass is turned on & check by-pass option - Keep the current lights state",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_stop"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "By-pass is turned off & check if the motion trigger is off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t8_on",
                                  "t8_off",
                                  "t8_stop"
                                ]
                              },
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "match": "all",
                                "state": "off"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass time delay",
                                        "delay": {
                                          "minutes": 0
                                        }
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "data": {
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}",
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ night_switch_entities }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Motion trigger is off and check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass settings and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "By-pass is turned off & check if the motion trigger is on",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t8_on",
                                  "t8_off",
                                  "t8_stop"
                                ]
                              },
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "match": "any",
                                "state": "on"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off and check conditions if enabled",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          "{{ (include_sun == 'sun_enabled') and (state_attr('sun.sun','elevation') >= sun_elevation | float(90)) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_disabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) }}",
                                          "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (is_state(night_boolean_scenes_scripts, 'off')) }}",
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              {
                                                "condition": "time",
                                                "after": "00:00:00",
                                                "before": "00:00:00"
                                              },
                                              "{{ include_time == 'time_enabled' }}"
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass time delay",
                                        "delay": {
                                          "minutes": 0
                                        }
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "data": {
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}",
                                                  "transition": "{{ night_light_transition_off }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ night_light_entities }}"
                                                },
                                                "action": "light.turn_off"
                                              },
                                              {
                                                "alias": "Turn off the scenes",
                                                "data": {
                                                  "entity_id": "{{ end_scene_entities }}"
                                                },
                                                "action": "scene.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ night_switch_entities }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "alias": "Turn off the boolean for scenes and scripts",
                                        "data": {
                                          "entity_id": []
                                        },
                                        "action": "input_boolean.turn_off"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Motion trigger is on and check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass settings and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "Sun, ambient & time above setting to turn off",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t9",
                                  "t10",
                                  "t11"
                                ]
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "If transition is selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "data": {
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}",
                                          "transition": "{{ night_light_transition_off }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "If transition is not selected",
                                    "conditions": [
                                      {
                                        "condition": "template",
                                        "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the lights",
                                        "target": {
                                          "entity_id": "{{ night_light_entities }}"
                                        },
                                        "action": "light.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the scenes",
                                        "data": {
                                          "entity_id": "{{ end_scene_entities }}"
                                        },
                                        "action": "scene.turn_on"
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "Turn off the switches",
                                "target": {
                                  "entity_id": "{{ night_switch_entities }}"
                                },
                                "action": "switch.turn_off"
                              },
                              {
                                "alias": "Turn off the script",
                                "data": {
                                  "entity_id": "{{ end_script_entities }}"
                                },
                                "action": "script.turn_on"
                              },
                              {
                                "alias": "Turn off the input boolean night lights",
                                "data": {
                                  "entity_id": []
                                },
                                "action": "input_boolean.turn_off"
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          },
                          {
                            "alias": "Turn off normal lights when trigger by start night lights conditions",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": [
                                  "t4",
                                  "t5",
                                  "t6"
                                ]
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "light - switch - scene - script is ON",
                                    "conditions": [
                                      "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (is_state(boolean_scenes_scripts, 'on')) }}"
                                    ],
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "alias": "If transition is selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' in include_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_lights_light }}"
                                                },
                                                "data": {
                                                  "transition": "{{ light_transition_off }}"
                                                },
                                                "action": "light.turn_off"
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "If transition is not selected",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'use_transition' not in include_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_lights_light }}"
                                                },
                                                "action": "light.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "Turn off the switches",
                                        "target": {
                                          "entity_id": "{{ crossover_lights_switch }}"
                                        },
                                        "action": "switch.turn_off"
                                      },
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "choose": [
                                          {
                                            "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "alias": "If transition is selected",
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ 'use_transition' in include_light_control }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the scenes",
                                                        "data": {
                                                          "entity_id": "{{ end_scene_entities }}",
                                                          "transition": "{{ light_transition_off }}"
                                                        },
                                                        "action": "scene.turn_on"
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "alias": "If transition is not selected",
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ 'use_transition' not in include_light_control }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the scenes",
                                                        "data": {
                                                          "entity_id": "{{ end_scene_entities }}"
                                                        },
                                                        "action": "scene.turn_on"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "alias": "Turn off the input boolean normal lights",
                                                "data": {
                                                  "entity_id": []
                                                },
                                                "action": "input_boolean.turn_off"
                                              },
                                              {
                                                "alias": "Turn ON lights",
                                                "target": {
                                                  "entity_id": "{{ crossover_night_lights_light_on }}"
                                                },
                                                "data": "{{ night_light_data }}",
                                                "action": "light.turn_on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "light - switch - scene - script is ON",
                                    "conditions": [
                                      "{{ 'manage_scripts_crossing_over' in include_night_light_control }}",
                                      "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (is_state(boolean_scenes_scripts, 'off')) }}"
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Turn off the script",
                                        "data": {
                                          "entity_id": "{{ end_script_entities }}"
                                        },
                                        "action": "script.turn_on"
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Safe Guard when HA restarts",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t15"
                              }
                            ],
                            "sequence": [
                              {
                                "choose": [
                                  {
                                    "alias": "Check all by-pass are off and check conditions if enabled",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "state": "off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Small time delay required",
                                        "delay": {
                                          "seconds": 1
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Check if any by-passes are on",
                                    "conditions": [
                                      {
                                        "condition": "or",
                                        "conditions": [
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "or",
                                                "conditions": [
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  },
                                                  {
                                                    "condition": "state",
                                                    "entity_id": [],
                                                    "match": "any",
                                                    "state": "on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          },
                                          {
                                            "condition": "and",
                                            "conditions": [
                                              "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ],
                                    "sequence": [
                                      {
                                        "alias": "Check by-pass auto off is enabled and preform the correct action",
                                        "if": [
                                          {
                                            "alias": "Check if the by-pass auto off is enabled",
                                            "condition": "template",
                                            "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                          }
                                        ],
                                        "then": [
                                          {
                                            "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                            "delay": {
                                              "minutes": 60
                                            }
                                          },
                                          {
                                            "alias": "Parallel Actions for the by-pass auto off",
                                            "parallel": [
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "sequence": [
                                                  {
                                                    "choose": [
                                                      {
                                                        "conditions": [
                                                          {
                                                            "condition": "template",
                                                            "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                          }
                                                        ],
                                                        "sequence": [
                                                          {
                                                            "alias": "Turn off the by-pass",
                                                            "entity_id": [],
                                                            "action": "homeassistant.turn_off"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn ON lights",
                        "target": {
                          "entity_id": "{{ night_light_entities_off }}"
                        },
                        "data": "{{ night_light_data }}",
                        "action": "light.turn_on"
                      },
                      {
                        "choose": [
                          {
                            "alias": "Check if normal lights scenes or scripts helper is on - This is for scenes only when crossing over",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{% if boolean_scenes_scripts == [] %}\n  false\n{% elif is_state(boolean_scenes_scripts, 'on') %}\n  true\n{% else %}\n  false\n{% endif %}"
                              }
                            ],
                            "sequence": null
                          },
                          {
                            "alias": "If transition is selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn on the night scenes",
                                "target": {
                                  "entity_id": "{{ night_scene_entities }}"
                                },
                                "data": {
                                  "transition": "{{ night_light_transition_on }}"
                                },
                                "action": "scene.turn_on"
                              },
                              {
                                "alias": "Turn on the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": "{{ night_boolean_scenes_scripts_helper }}"
                                },
                                "action": "input_boolean.turn_on"
                              }
                            ]
                          },
                          {
                            "alias": "If transition is not selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn on the night scenes",
                                "target": {
                                  "entity_id": "{{ night_scene_entities }}"
                                },
                                "action": "scene.turn_on"
                              },
                              {
                                "alias": "Turn on the boolean for scenes and scripts",
                                "data": {
                                  "entity_id": "{{ night_boolean_scenes_scripts_helper }}"
                                },
                                "action": "input_boolean.turn_on"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn on the night switches",
                        "target": {
                          "entity_id": "{{ night_switch_entities_off }}"
                        },
                        "action": "switch.turn_on"
                      },
                      {
                        "alias": "Turn on the night scripts",
                        "target": {
                          "entity_id": "{{ night_script_entities }}"
                        },
                        "action": "script.turn_on"
                      },
                      {
                        "choose": [
                          {
                            "alias": "By-pass is enabled & check by-pass option - Turn lights on",
                            "conditions": [
                              {
                                "condition": "trigger",
                                "id": "t7_on"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Check by-pass settings and preform the correct action",
                                "if": [
                                  {
                                    "alias": "Check if the by-pass auto off is enabled",
                                    "condition": "template",
                                    "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                  }
                                ],
                                "then": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                    "delay": {
                                      "minutes": 60
                                    }
                                  },
                                  {
                                    "alias": "Parallel Actions for the by-pass auto off",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the by-pass",
                                                    "entity_id": [],
                                                    "action": "homeassistant.turn_off"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ],
                                "else": [
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "choose": [
                          {
                            "alias": "Check if the trigger is on and wait for it to go off",
                            "conditions": [
                              {
                                "condition": "state",
                                "entity_id": [
                                  "binary_sensor.bedroom_contact"
                                ],
                                "state": "on",
                                "match": "any"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Wait until motion sensor is off",
                                "wait_for_trigger": [
                                  {
                                    "platform": "state",
                                    "entity_id": [
                                      "binary_sensor.bedroom_contact"
                                    ],
                                    "from": "on",
                                    "to": "off"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Wait the number of minutes set in the night lights time delay",
                        "delay": {
                          "minutes": 5
                        }
                      },
                      {
                        "choose": [
                          {
                            "alias": "If transition is selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn off the lights",
                                "target": {
                                  "entity_id": "{{ night_light_entities }}"
                                },
                                "data": {
                                  "transition": "{{ night_light_transition_off }}"
                                },
                                "action": "light.turn_off"
                              },
                              {
                                "alias": "Turn off the scenes",
                                "data": {
                                  "entity_id": "{{ end_scene_entities }}",
                                  "transition": "{{ night_light_transition_off }}"
                                },
                                "action": "scene.turn_on"
                              }
                            ]
                          },
                          {
                            "alias": "If transition is not selected",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                              }
                            ],
                            "sequence": [
                              {
                                "alias": "Turn off the lights",
                                "target": {
                                  "entity_id": "{{ night_light_entities }}"
                                },
                                "action": "light.turn_off"
                              },
                              {
                                "alias": "Turn off the scenes",
                                "data": {
                                  "entity_id": "{{ end_scene_entities }}"
                                },
                                "action": "scene.turn_on"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Turn off the switches",
                        "target": {
                          "entity_id": "{{ night_switch_entities }}"
                        },
                        "action": "switch.turn_off"
                      },
                      {
                        "alias": "Turn off the script",
                        "data": {
                          "entity_id": "{{ end_script_entities }}"
                        },
                        "action": "script.turn_on"
                      },
                      {
                        "alias": "Turn off the boolean for scenes and scripts",
                        "data": {
                          "entity_id": []
                        },
                        "action": "input_boolean.turn_off"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "choose": [
                      {
                        "alias": "By-pass is turned on & check by-pass option - Turn lights off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t7_off"
                          }
                        ],
                        "sequence": [
                          {
                            "alias": "Wait the number of minutes set in the by-pass time delay",
                            "delay": {
                              "minutes": 0
                            }
                          },
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "alias": "Check by-pass settings and preform the correct action",
                            "if": [
                              {
                                "alias": "Check if the by-pass auto off is enabled",
                                "condition": "template",
                                "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                              }
                            ],
                            "then": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                "delay": {
                                  "minutes": 60
                                }
                              },
                              {
                                "alias": "Parallel Actions for the by-pass auto off",
                                "parallel": [
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ],
                            "else": [
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "By-pass is turned on & check by-pass option - Keep the current lights state",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t7_stop"
                          }
                        ],
                        "sequence": [
                          {
                            "alias": "Check by-pass settings and preform the correct action",
                            "if": [
                              {
                                "alias": "Check if the by-pass auto off is enabled",
                                "condition": "template",
                                "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                              }
                            ],
                            "then": [
                              {
                                "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                "delay": {
                                  "minutes": 60
                                }
                              },
                              {
                                "alias": "Parallel Actions for the by-pass auto off",
                                "parallel": [
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "sequence": [
                                      {
                                        "choose": [
                                          {
                                            "conditions": [
                                              {
                                                "condition": "template",
                                                "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                              }
                                            ],
                                            "sequence": [
                                              {
                                                "alias": "Turn off the by-pass",
                                                "entity_id": [],
                                                "action": "homeassistant.turn_off"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "stop": "Stop the automation"
                              }
                            ],
                            "else": [
                              {
                                "stop": "Stop the automation"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "choose": [
                      {
                        "alias": "By-pass is turned off & check if the motion trigger is off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t8_on",
                              "t8_off",
                              "t8_stop"
                            ]
                          },
                          {
                            "condition": "state",
                            "entity_id": [
                              "binary_sensor.bedroom_contact"
                            ],
                            "match": "all",
                            "state": "off"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass time delay",
                                    "delay": {
                                      "minutes": 0
                                    }
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "data": {
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}",
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ switch_entities }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              },
                              {
                                "alias": "Motion trigger is off and check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "By-pass is turned off & check if the motion trigger is on",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t8_on",
                              "t8_off",
                              "t8_stop"
                            ]
                          },
                          {
                            "condition": "state",
                            "entity_id": [
                              "binary_sensor.bedroom_contact"
                            ],
                            "match": "any",
                            "state": "on"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off and check conditions if enabled",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      "{{ (include_sun == 'sun_enabled') and (state_attr('sun.sun','elevation') >= sun_elevation | float(90)) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_disabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) }}",
                                      "{{ (include_ambient == 'ambient_enabled') and (ambient_light_options == 'ambient_light_option_enabled') and (states[ambient_light_sensor].state | int > ambient_light_value | int) and (is_state(boolean_scenes_scripts, 'off')) }}",
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          {
                                            "condition": "time",
                                            "after": "00:00:00",
                                            "before": "00:00:00"
                                          },
                                          "{{ include_time == 'time_enabled' }}"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait the number of minutes set in the by-pass time delay",
                                    "delay": {
                                      "minutes": 0
                                    }
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "data": {
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}",
                                              "transition": "{{ light_transition_off }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ light_entities }}"
                                            },
                                            "action": "light.turn_off"
                                          },
                                          {
                                            "alias": "Turn off the scenes",
                                            "data": {
                                              "entity_id": "{{ end_scene_entities }}"
                                            },
                                            "action": "scene.turn_on"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ switch_entities }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "alias": "Turn off the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              },
                              {
                                "alias": "Motion trigger is on and check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "choose": [
                      {
                        "alias": "Sun, ambient & time above setting to turn off",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t9",
                              "t10",
                              "t11"
                            ]
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the input boolean night lights",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          },
                          {
                            "stop": "Stop the automation"
                          }
                        ]
                      },
                      {
                        "alias": "Turn off night lights when trigger by end night lights conditions",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": [
                              "t12",
                              "t13",
                              "t14"
                            ]
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0) or (is_state(night_boolean_scenes_scripts, 'on')) }}"
                                ],
                                "sequence": [
                                  {
                                    "choose": [
                                      {
                                        "alias": "If transition is selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ crossover_night_lights_light }}"
                                            },
                                            "data": {
                                              "transition": "{{ night_light_transition_off }}"
                                            },
                                            "action": "light.turn_off"
                                          }
                                        ]
                                      },
                                      {
                                        "alias": "If transition is not selected",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "alias": "Turn off the lights",
                                            "target": {
                                              "entity_id": "{{ crossover_night_lights_light }}"
                                            },
                                            "action": "light.turn_off"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "alias": "Turn off the switches",
                                    "target": {
                                      "entity_id": "{{ crossover_night_lights_switch }}"
                                    },
                                    "action": "switch.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "choose": [
                                      {
                                        "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                        "conditions": [
                                          {
                                            "condition": "template",
                                            "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                          }
                                        ],
                                        "sequence": [
                                          {
                                            "choose": [
                                              {
                                                "alias": "If transition is selected",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ 'use_transition' in include_night_light_control }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the scenes",
                                                    "data": {
                                                      "entity_id": "{{ end_scene_entities }}",
                                                      "transition": "{{ night_light_transition_off }}"
                                                    },
                                                    "action": "scene.turn_on"
                                                  }
                                                ]
                                              },
                                              {
                                                "alias": "If transition is not selected",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ 'use_transition' not in include_night_light_control }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "alias": "Turn off the scenes",
                                                    "data": {
                                                      "entity_id": "{{ end_scene_entities }}"
                                                    },
                                                    "action": "scene.turn_on"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "alias": "Turn off the input boolean night lights",
                                            "data": {
                                              "entity_id": []
                                            },
                                            "action": "input_boolean.turn_off"
                                          },
                                          {
                                            "choose": [
                                              {
                                                "alias": "Turn ON lights",
                                                "conditions": [
                                                  {
                                                    "condition": "template",
                                                    "value_template": "{{ include_dynamic_lighting == 'disable_dynamic_lighting' }}"
                                                  }
                                                ],
                                                "sequence": [
                                                  {
                                                    "target": {
                                                      "entity_id": "{{ crossover_lights_light_on }}"
                                                    },
                                                    "data": "{{ light_data }}",
                                                    "action": "light.turn_on"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  "{{ 'manage_scripts_crossing_over' in include_night_light_control }}",
                                  "{{ (expand(light_switch.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (expand(night_lights.entity_id) | selectattr('state', '==', 'off') | list | count > 0) or (is_state(night_boolean_scenes_scripts, 'off')) }}"
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the script",
                                    "data": {
                                      "entity_id": "{{ end_script_entities }}"
                                    },
                                    "action": "script.turn_on"
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "alias": "Safe Guard when HA restarts",
                        "conditions": [
                          {
                            "condition": "trigger",
                            "id": "t15"
                          }
                        ],
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Check all by-pass are off and check conditions if enabled",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          },
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "state": "off"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Small time delay required",
                                    "delay": {
                                      "seconds": 1
                                    }
                                  }
                                ]
                              },
                              {
                                "alias": "Check if any by-passes are on",
                                "conditions": [
                                  {
                                    "condition": "or",
                                    "conditions": [
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "or",
                                            "conditions": [
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              },
                                              {
                                                "condition": "state",
                                                "entity_id": [],
                                                "match": "any",
                                                "state": "on"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' in include_bypass) and ('bypass_enabled_stop' not in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      },
                                      {
                                        "condition": "and",
                                        "conditions": [
                                          "{{ ('bypass_enabled_turn_on' not in include_bypass) and ('bypass_enabled_turn_off' not in include_bypass) and ('bypass_enabled_stop' in include_bypass) }}",
                                          {
                                            "condition": "state",
                                            "entity_id": [],
                                            "match": "any",
                                            "state": "on"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass auto off is enabled and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "stop": "Stop the automation"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "alias": "Parallel actions for dynamic lighting and normal lights",
                    "parallel": [
                      {
                        "sequence": [
                          {
                            "alias": "Check if the dynamic lighting is enabled",
                            "condition": "and",
                            "conditions": [
                              {
                                "condition": "template",
                                "value_template": "{{ include_dynamic_lighting != 'disable_dynamic_lighting' }}"
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Dynamic Lighting - Input Boolean Helper",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ dynamic_lighting_boolean != [] }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the boolean for dynamic lighting",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "1 - Dynamic Lighting - Lux Controlled Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness'}}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If dynamic lighting brightness is in the dead zone",
                                              "conditions": "{{ in_dead_zone }}",
                                              "sequence": [
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set the dynamic lighting brightness for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "2 - Dynamic Lighting - Lux Controlled Brightness - Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness_inv'}}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and  (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If dynamic lighting brightness is in the dead zone",
                                              "conditions": "{{ in_dead_zone }}",
                                              "sequence": [
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic lighting brightness inverted for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_lux_controled_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Dynamic lighting heartbeat",
                                                  "delay": {
                                                    "minutes": 1
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "3 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if 'use_brightness' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'brightness_pct': light_brightness }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "4 - Dynamic Lighting - Sun Elevation Lighting - Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "5 - Dynamic Lighting - Sun Elevation Lighting - Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {% if include_light_colour_control == 'use_colour_temperature' %}\n  {% set light.data = dict(light.data, **{ 'color_temp_kelvin': light_colour_temperature }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgb_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgb_color': light_rgb_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbw_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbw_color': light_rgbw_colour }) %}\n{% endif %} {% if include_light_colour_control == 'use_rgbww_colour' %}\n  {% set light.data = dict(light.data, **{ 'rgbww_color': light_rgbww_colour }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness inverted for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "6 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_brightness %} {% set end_slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_brightness %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_min_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness and dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "7 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Dynamic Lighting Control",
                                    "repeat": {
                                      "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                      "sequence": [
                                        {
                                          "variables": {
                                            "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                            "dynamic_brightness_pct": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {{ brightness_value | round(0) }}\n",
                                            "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                            "should_wait": "{% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_min_brightness %} {% set end_slope = (dynamic_lighting_max_brightness - dynamic_lighting_min_brightness) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_max_brightness %} {% if elevation > -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set brightness_value = dynamic_lighting_max_brightness %}\n  {% else %}\n    {% set brightness_value = dynamic_lighting_min_brightness %}\n  {% endif %}\n{% else %}\n  {% set brightness_value = dynamic_lighting_max_brightness %}\n{% endif %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if (brightness_value >= (lp * 0.99) and brightness_value <= (lp * 1.01)) %}\n    true\n  {% else %}\n    false\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                          }
                                        },
                                        {
                                          "choose": [
                                            {
                                              "alias": "Stop when crossing over",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "stop": "Stop the automation"
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                },
                                                {
                                                  "condition": "trigger",
                                                  "id": [
                                                    "t12",
                                                    "t13",
                                                    "t14"
                                                  ]
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "If lights are ON and the lights are within 1% of the actual brightness",
                                              "conditions": "{{ should_wait }}",
                                              "sequence": [
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "alias": "Set dynamic sun elevation lighting brightness and dynamic sun elevation colour temperature for the normal lights",
                                              "conditions": [
                                                {
                                                  "condition": "template",
                                                  "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_brightness_inv' }}"
                                                }
                                              ],
                                              "sequence": [
                                                {
                                                  "target": {
                                                    "entity_id": "{{ light_entities }}"
                                                  },
                                                  "data": "{{ dynamic_light_data }}",
                                                  "action": "light.turn_on"
                                                },
                                                {
                                                  "alias": "Wait for sun elevation to change",
                                                  "wait_for_trigger": [
                                                    {
                                                      "platform": "state",
                                                      "entity_id": "sun.sun",
                                                      "attribute": "elevation"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "8 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Lux Controlled Brightness",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Parallel actions for dynamic lighting",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                                    "dynamic_kelvin": "{% if expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 %}\n  {% set elevation = state_attr('sun.sun', 'elevation') | float %}\n  {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %}\n  {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %}\n  {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %}\n  {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %}\n  {% if elevation >= -10 %}\n    {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n    {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% else %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% endif %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% endif %}\n  {{ colour_temp_value | round(0) }}\n{% endif %}\n",
                                                    "dynamic_light_off_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_max_lux - dynamic_lighting_min_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_max_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Check if the light is off",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is off",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is on",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        },
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If dynamic lighting brightness is in the dead zone",
                                                      "conditions": "{{ in_dead_zone }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness and dynamic sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        },
                                                        "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}"
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_off_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                                      "conditions": "{{ should_wait }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If the lights are OFF",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "9 - Dynamic Lighting - Sun Elevation Lighting - Colour Temp + Lux Controlled Brightness Inverted",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Parallel actions for dynamic lighting",
                                    "parallel": [
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_brightness_pct": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if lp <= 0 %}\n  {% set bv = bv %}\n{% elif (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif (bv > lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif (lp > bv) and  (lp - bv) <= dynamic_lighting_dead_zone %}\n  {% set bv = lp %}\n{% elif bv > (lp + dynamic_lighting_step_value) %}\n  {% set bv = lp + dynamic_lighting_step_value %}\n{% elif bv < (lp - dynamic_lighting_step_value) %}\n  {% set bv = lp - dynamic_lighting_step_value %}\n{% endif %} {{ bv | round(0) }}\n",
                                                    "dynamic_kelvin": "{% if expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 %}\n  {% set elevation = state_attr('sun.sun', 'elevation') | float %}\n  {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %}\n  {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %}\n  {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %}\n  {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %}\n  {% if elevation >= -10 %}\n    {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n    {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n      {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n    {% else %}\n      {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n    {% endif %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% endif %}\n  {{ colour_temp_value | round(0) }}\n{% endif %}\n",
                                                    "dynamic_light_off_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'brightness_pct': dynamic_brightness_pct }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "in_dead_zone": "{% set lux = states(dynamic_lighting_lux_sensor) | float %} {% set slope = (dynamic_lighting_min_brightness - dynamic_lighting_max_brightness) / (dynamic_lighting_min_lux - dynamic_lighting_max_lux) %} {% set ak = (( slope * dynamic_lighting_min_lux) * -1) + dynamic_lighting_min_brightness %} {% set le = light_entities %} {% set lec = expand(le) | map(attribute='entity_id') | list | length %} {% set lp = (expand(le) | map(attribute='attributes.brightness') | reject('equalto', None) | sum | float(default=255) / 255 * 100 / lec) | round(0) %} {% if lux <= dynamic_lighting_min_lux %}\n  {% set bv = dynamic_lighting_min_brightness %}\n{% elif lux >= dynamic_lighting_max_lux %}\n  {% set bv = dynamic_lighting_max_brightness %}\n{% else %}\n  {% set bv = ((slope * lux) + ak) | round(1) %}\n{% endif %} {% if (bv > lp) and (dynamic_lighting_max_brightness - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp > bv) and (lp - dynamic_lighting_min_brightness) <= dynamic_lighting_dead_zone %}\n  false\n{% elif (bv >= lp) and (bv - lp) <= dynamic_lighting_dead_zone %}\n  true\n{% elif (lp >= bv) and (lp - bv) <= dynamic_lighting_dead_zone %}\n  true\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Check if the light is off",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is off",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "alias": "Delay for parallel actions needed for when the light is on",
                                                          "delay": {
                                                            "milliseconds": 100
                                                          }
                                                        },
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If dynamic lighting brightness is in the dead zone",
                                                      "conditions": "{{ in_dead_zone }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness and dynamic sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        },
                                                        "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}"
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_off_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set dynamic lighting lux brightness for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Dynamic lighting heartbeat",
                                                          "delay": {
                                                            "minutes": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "sequence": [
                                          {
                                            "alias": "Dynamic Lighting Control",
                                            "repeat": {
                                              "until": "{{ ((dynamic_lighting_boolean == []) and (expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0)) or ((dynamic_lighting_boolean != []) and (is_state(dynamic_lighting_boolean, 'off'))) }}",
                                              "sequence": [
                                                {
                                                  "variables": {
                                                    "dynamic_kelvin": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% set start_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_start_rising - dynamic_lighting_sun_elevation_end_rising) %} {% set start_ak = (( start_slope * dynamic_lighting_sun_elevation_end_rising) * -1) + dynamic_lighting_max_colour_temp %} {% set end_slope = (dynamic_lighting_min_colour_temp - dynamic_lighting_max_colour_temp) / (dynamic_lighting_sun_elevation_end_falling - dynamic_lighting_sun_elevation_start_falling) %} {% set end_ak = (( end_slope * dynamic_lighting_sun_elevation_end_falling) * -1) + dynamic_lighting_min_colour_temp %} {% if elevation >= -10 %}\n  {% if elevation >= dynamic_lighting_sun_elevation_start_rising and elevation <= dynamic_lighting_sun_elevation_end_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = ((start_slope * elevation) + start_ak) | round(1) %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_falling and elevation >= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = ((end_slope * elevation) + end_ak) | round(1) %}\n  {% elif elevation >= dynamic_lighting_sun_elevation_end_rising and elevation >= dynamic_lighting_sun_elevation_start_falling  %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_start_rising and is_state_attr('sun.sun', 'rising', true) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% elif elevation <= dynamic_lighting_sun_elevation_end_falling and is_state_attr('sun.sun', 'rising', false) %}\n    {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n  {% else %}\n    {% set colour_temp_value = dynamic_lighting_max_colour_temp %}\n  {% endif %}\n{% else %}\n  {% set colour_temp_value = dynamic_lighting_min_colour_temp %}\n{% endif %} {{ colour_temp_value | round(0) }}\n",
                                                    "dynamic_light_data": "{% set light = namespace(data={}) %} {% set light.data = dict(light.data, **{ 'color_temp_kelvin': dynamic_kelvin }) %} {% if 'use_transition' in include_light_control %}\n  {% set light.data = dict(light.data, **{ 'transition': light_transition_on }) %}\n{% endif %} {{ light.data }}\n",
                                                    "should_wait": "{% set elevation = state_attr('sun.sun', 'elevation') | float %} {% if expand(light_entities) | selectattr('state', '==', 'on') | list | count > 0 %}\n  {% if elevation >= (dynamic_lighting_sun_elevation_start_rising - 2) and elevation <= (dynamic_lighting_sun_elevation_end_rising + 2) and is_state_attr('sun.sun', 'rising', true) %}\n    false\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_falling + 2) and elevation >= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    false\n  {% elif elevation >= (dynamic_lighting_sun_elevation_end_rising + 2) and elevation >= (dynamic_lighting_sun_elevation_start_falling - 2)  %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_start_rising - 2) and is_state_attr('sun.sun', 'rising', true) %}\n    true\n  {% elif elevation <= (dynamic_lighting_sun_elevation_end_falling - 2) and is_state_attr('sun.sun', 'rising', false) %}\n    true\n  {% else %}\n    true\n  {% endif %}\n{% else %}\n  false\n{% endif %}\n"
                                                  }
                                                },
                                                {
                                                  "choose": [
                                                    {
                                                      "alias": "Stop when crossing over",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' not in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "stop": "Stop the automation"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Adjust the lights settings when crossing over if lights are ON is selected in night light control",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ 'if_lights_are_on_adjust_when_crossing_over' in include_night_light_control }}"
                                                        },
                                                        {
                                                          "condition": "trigger",
                                                          "id": [
                                                            "t12",
                                                            "t13",
                                                            "t14"
                                                          ]
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If sun elevation is outside the adjustment zone and the lights are ON",
                                                      "conditions": "{{ should_wait }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "If the lights are OFF",
                                                      "conditions": "{{ expand(light_entities) | selectattr('state', '==', 'off') | list | count > 0 }}",
                                                      "sequence": [
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "alias": "Set sun elevation colour temperature for the normal lights",
                                                      "conditions": [
                                                        {
                                                          "condition": "template",
                                                          "value_template": "{{ include_dynamic_lighting == 'enable_sun_elevation_colour_lux_brightness_inv' }}"
                                                        }
                                                      ],
                                                      "sequence": [
                                                        {
                                                          "target": {
                                                            "entity_id": "{{ light_entities }}"
                                                          },
                                                          "data": "{{ dynamic_light_data }}",
                                                          "action": "light.turn_on"
                                                        },
                                                        {
                                                          "alias": "Wait for sun elevation to change",
                                                          "wait_for_trigger": [
                                                            {
                                                              "platform": "state",
                                                              "entity_id": "sun.sun",
                                                              "attribute": "elevation"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "stop": "Stop the automation"
                          }
                        ]
                      },
                      {
                        "sequence": [
                          {
                            "choose": [
                              {
                                "alias": "Turn ON lights",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ include_dynamic_lighting == 'disable_dynamic_lighting' }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "target": {
                                      "entity_id": "{{ light_entities_off }}"
                                    },
                                    "data": "{{ light_data }}",
                                    "action": "light.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Check if normal lights scenes or scripts helper is on - This is for scenes only when crossing over",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{% if night_boolean_scenes_scripts == [] %}\n  false\n{% elif is_state(night_boolean_scenes_scripts, 'on') %}\n  true\n{% else %}\n  false\n{% endif %}"
                                  }
                                ],
                                "sequence": null
                              },
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the scenes",
                                    "target": {
                                      "entity_id": "{{ scene_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_on }}"
                                    },
                                    "action": "scene.turn_on"
                                  },
                                  {
                                    "alias": "Turn on the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": "{{ boolean_scenes_scripts_helper }}"
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn on the scenes",
                                    "target": {
                                      "entity_id": "{{ scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  },
                                  {
                                    "alias": "Turn on the boolean for scenes and scripts",
                                    "data": {
                                      "entity_id": "{{ boolean_scenes_scripts_helper }}"
                                    },
                                    "action": "input_boolean.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn on the switches",
                            "target": {
                              "entity_id": "{{ switch_entities_off }}"
                            },
                            "action": "switch.turn_on"
                          },
                          {
                            "alias": "Turn on the scripts",
                            "target": {
                              "entity_id": "{{ script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "choose": [
                              {
                                "alias": "By-pass is enabled & check by-pass option - Turn lights on",
                                "conditions": [
                                  {
                                    "condition": "trigger",
                                    "id": "t7_on"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Check by-pass settings and preform the correct action",
                                    "if": [
                                      {
                                        "alias": "Check if the by-pass auto off is enabled",
                                        "condition": "template",
                                        "value_template": "{{ ('bypass_auto_off_enabled_on' in include_bypass_auto_off) or ('bypass_auto_off_enabled_off' in include_bypass_auto_off) or ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                      }
                                    ],
                                    "then": [
                                      {
                                        "alias": "Wait the number of minutes set in the by-pass auto off time delay",
                                        "delay": {
                                          "minutes": 60
                                        }
                                      },
                                      {
                                        "alias": "Parallel Actions for the by-pass auto off",
                                        "parallel": [
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_on' in include_bypass) and ('bypass_auto_off_enabled_on' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_turn_off' in include_bypass) and ('bypass_auto_off_enabled_off' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "sequence": [
                                              {
                                                "choose": [
                                                  {
                                                    "conditions": [
                                                      {
                                                        "condition": "template",
                                                        "value_template": "{{ ('bypass_enabled_stop' in include_bypass) and ('bypass_auto_off_enabled_stop' in include_bypass_auto_off) }}"
                                                      }
                                                    ],
                                                    "sequence": [
                                                      {
                                                        "alias": "Turn off the by-pass",
                                                        "entity_id": [],
                                                        "action": "homeassistant.turn_off"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ],
                                    "else": [
                                      {
                                        "stop": "Stop the automation"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "Check if the trigger is on and wait for it to go off",
                                "conditions": [
                                  {
                                    "condition": "state",
                                    "entity_id": [
                                      "binary_sensor.bedroom_contact"
                                    ],
                                    "state": "on",
                                    "match": "any"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Wait until motion sensor is off",
                                    "wait_for_trigger": [
                                      {
                                        "platform": "state",
                                        "entity_id": [
                                          "binary_sensor.bedroom_contact"
                                        ],
                                        "from": "on",
                                        "to": "off"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Wait the number of minutes set in the normal lights time delay",
                            "delay": {
                              "minutes": 0
                            }
                          },
                          {
                            "choose": [
                              {
                                "alias": "Dynamic Lighting - Input Boolean Helper",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ dynamic_lighting_boolean != [] }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the boolean for dynamic lighting",
                                    "data": {
                                      "entity_id": []
                                    },
                                    "action": "input_boolean.turn_off"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "choose": [
                              {
                                "alias": "If transition is selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "data": {
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}",
                                      "transition": "{{ light_transition_off }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              },
                              {
                                "alias": "If transition is not selected",
                                "conditions": [
                                  {
                                    "condition": "template",
                                    "value_template": "{{ 'use_transition' not in include_light_control }}"
                                  }
                                ],
                                "sequence": [
                                  {
                                    "alias": "Turn off the lights",
                                    "target": {
                                      "entity_id": "{{ light_entities }}"
                                    },
                                    "action": "light.turn_off"
                                  },
                                  {
                                    "alias": "Turn off the scenes",
                                    "data": {
                                      "entity_id": "{{ end_scene_entities }}"
                                    },
                                    "action": "scene.turn_on"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "alias": "Turn off the switches",
                            "target": {
                              "entity_id": "{{ switch_entities }}"
                            },
                            "action": "switch.turn_off"
                          },
                          {
                            "alias": "Turn off the script",
                            "data": {
                              "entity_id": "{{ end_script_entities }}"
                            },
                            "action": "script.turn_on"
                          },
                          {
                            "alias": "Turn off the boolean for scenes and scripts",
                            "data": {
                              "entity_id": []
                            },
                            "action": "input_boolean.turn_off"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "id": "1727066405247",
            "alias": "Sensor Light",
            "description": "light on with door open"
          },
          "blueprint_inputs": {
            "id": "1727066405247",
            "alias": "Sensor Light",
            "description": "light on with door open",
            "use_blueprint": {
              "path": "Blackshome/sensor-light.yaml",
              "input": {
                "motion_trigger": [
                  "binary_sensor.bedroom_contact"
                ],
                "light_switch": {
                  "device_id": "d9614a84d59f0e41e02a56952c58a916",
                  "entity_id": "switch.sonoff_100156cbbb_2"
                },
                "time_delay": 0
              }
            }
          },
          "context": {
            "id": "01J8EMDC210NRN93F72KV1QEAX",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/5/conditions/0",
          "run_id": "ecbb4240a80fcb46e7a4cd7c9da5397d",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2024-09-23T05:07:04.897879+00:00",
            "finish": "2024-09-23T05:07:04.906538+00:00"
          },
          "domain": "automation",
          "item_id": "1727066405247",
          "trigger": "Home Assistant starting"
        }
      }
    ]
  }
}